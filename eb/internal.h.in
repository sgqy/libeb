/*                                                            -*- C -*-
 * Copyright (c) 1997, 98, 99, 2000, 01  
 *    Motoyuki Kasahara
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#ifndef EB_INTERNAL_H
#define EB_INTERNAL_H

#include "defs.h"

/*
 * Text domain name.
 */
#define EB_TEXT_DOMAIN_NAME	"eb"

/*
 * Locale directory.
 */
#define LOCALEDIR		"@localedir@"

/*
 * File and directory names.
 */
#define EB_FILE_NAME_START		"start"
#define EB_FILE_NAME_SOUND		"sound"
#define EB_FILE_NAME_CATALOG		"catalog"
#define EB_FILE_NAME_LANGUAGE		"language"
#define EB_FILE_NAME_VTOC		"vtoc"
#define EB_FILE_NAME_WELCOME		"welcome"
#define EB_FILE_NAME_CATALOGS		"catalogs"
#define EB_FILE_NAME_HONMON		"honmon"
#define EB_FILE_NAME_HONMON2		"honmon2"
#define EB_FILE_NAME_HONMONG		"honmong"
#define EB_FILE_NAME_HONMONS		"honmons"
#define EB_FILE_NAME_APPENDIX		"appendix"
#define EB_FILE_NAME_FUROKU		"furoku"

#define EB_DIRECTORY_NAME_DATA		"data"
#define EB_DIRECTORY_NAME_GAIJI		"gaiji"
#define EB_DIRECTORY_NAME_STREAM	"stream"
#define EB_DIRECTORY_NAME_MOVIE		"movie"

#define EB_SUFFIX_NONE			""
#define EB_SUFFIX_EBZ			".ebz"

/*
 * Search word types.
 */
#define EB_WORD_ALPHABET		0
#define EB_WORD_KANA			1
#define EB_WORD_OTHER			2
#define EB_WORD_INVALID			-1

/*
 * Index Style flags.
 */
#define EB_INDEX_STYLE_CONVERT		0
#define EB_INDEX_STYLE_ASIS		1
#define EB_INDEX_STYLE_REVERSED_CONVERT	2
#define EB_INDEX_STYLE_DELETE		2

/*
 * Text content currently read.
 */
#define EB_TEXT_TEXT            	1
#define EB_TEXT_HEADING         	2
#define EB_TEXT_RAWTEXT         	3
#define EB_TEXT_NONE           		0
#define EB_TEXT_INVALID        		-1

/*
 * Search method currently processed.
 */
#define EB_SEARCH_EXACTWORD            	0
#define EB_SEARCH_WORD         		1
#define EB_SEARCH_ENDWORD         	2
#define EB_SEARCH_KEYWORD         	3
#define EB_SEARCH_MULTI         	4
#define EB_SEARCH_NONE           	-1

/*
 * Arrangement style of entries in a search index page.
 */
#define EB_ARRANGE_FIXED		0
#define EB_ARRANGE_VARIABLE		1

/*
 * The maximum index depth of search indexes.
 */
#define EB_MAX_INDEX_DEPTH		6

/*
 * Get an unsigned value from an octet stream buffer.
 */
#define eb_uint1(p) (*(const unsigned char *)(p))

#define eb_uint2(p) ((*(const unsigned char *)(p) << 8) \
        + (*(const unsigned char *)((p) + 1)))

#define eb_uint3(p) ((*(const unsigned char *)(p) << 16) \
        + (*(const unsigned char *)((p) + 1) << 8) \
        + (*(const unsigned char *)((p) + 2)))

#define eb_uint4(p) ((*(const unsigned char *)(p) << 24) \
        + (*(const unsigned char *)((p) + 1) << 16) \
        + (*(const unsigned char *)((p) + 2) << 8) \
        + (*(const unsigned char *)((p) + 3)))

#define eb_uint4_le(p) ((*(const unsigned char *)(p)) \
        + (*(const unsigned char *)((p) + 1) << 8) \
        + (*(const unsigned char *)((p) + 2) << 16) \
        + (*(const unsigned char *)((p) + 3) << 24))

/*
 * External variable declarations.
 */
/* hook.c */
extern EB_Hookset eb_default_hookset;

/*
 * Function declarations.
 */
/* appendix.c */
void eb_initialize_alt_cache EB_P((EB_Appendix *));

/* binary.c */
void eb_initialize_binary EB_P((EB_Book *));

/* filename.c */
EB_Error_Code eb_canonicalize_path_name EB_P((char *));
EB_Error_Code eb_fix_directory_name EB_P((const char *, char *));
EB_Error_Code eb_fix_directory_name2 EB_P((const char *, const char *,
    char *));
EB_Error_Code eb_fix_file_name EB_P((const char *, char *));
EB_Error_Code eb_fix_file_name2 EB_P((const char *, const char *, char *));
EB_Error_Code eb_fix_file_name3 EB_P((const char *, const char *,
    const char *, char *));
EB_Error_Code eb_compose_path_name EB_P((const char *, const char *,
    const char *, char *));
EB_Error_Code eb_compose_path_name2 EB_P((const char *, const char *,
    const char *, const char *, char *));
EB_Error_Code eb_compose_path_name3 EB_P((const char *, const char *,
    const char *, const char *, const char *, char *));

/* font.c */
EB_Error_Code eb_initialize_font EB_P((EB_Book *));

/* hook.c */
void eb_initialize_default_hookset EB_P((void));

/* jacode.c */
void eb_jisx0208_to_euc EB_P((char *, const char *));
void eb_sjis_to_euc EB_P((char *, const char *));

/* language.c */
EB_Error_Code eb_initialize_languages EB_P((EB_Book *));

/* lock.c */
#ifdef ENABLE_PTHREAD
void eb_initialize_lock EB_P((EB_Lock *));
void eb_finalize_lock EB_P((EB_Lock *));
void eb_lock EB_P((EB_Lock *));
void eb_unlock EB_P((EB_Lock *));
#else /* not ENABLE_PTHREAD */
#define eb_lock(x)
#define eb_unlock(x)
#define eb_initialize_lock(x)
#define eb_finalize_lock(x)
#endif /* not ENABLE_PTHREAD */

/* match.c */
int eb_match_word EB_P((const char *, const char *, size_t));
int eb_match_exactword EB_P((const char *, const char *, size_t));

/* message.c */
EB_Error_Code eb_initialize_messages EB_P((EB_Book *));

/* multi.c */
EB_Error_Code eb_initialize_multi_search EB_P((EB_Book *));

/* narwfont.c */
EB_Error_Code eb_initialize_narrow_font EB_P((EB_Book *));

/* search.c */
void eb_initialize_search EB_P((EB_Book *));
EB_Error_Code eb_presearch_word EB_P((EB_Book *, EB_Search_Context *));
EB_Error_Code eb_hit_list EB_P((EB_Book *, int, EB_Hit *, int *));

/* setword.c */
EB_Error_Code eb_set_word EB_P((EB_Book *, const char *, char *, char *,
    EB_Word_Code *));
EB_Error_Code eb_set_endword EB_P((EB_Book *, const char *, char *, char *,
    EB_Word_Code *));
EB_Error_Code eb_set_keyword EB_P((EB_Book *, const char *, char *, char *,
    EB_Word_Code *));
EB_Error_Code eb_set_multiword EB_P((EB_Book *, EB_Multi_Search_Code,
    EB_Multi_Entry_Code, const char *, char *, char *, EB_Word_Code *));

/* text.c */
void eb_initialize_text EB_P((EB_Book *));
EB_Error_Code eb_forward_heading EB_P((EB_Book *));

/* narwfont.c */
EB_Error_Code eb_initialize_wide_font EB_P((EB_Book *));

/* uint.c */
unsigned eb_bcd2 EB_P((const char *));
unsigned eb_bcd4 EB_P((const char *));
unsigned eb_bcd6 EB_P((const char *));

/* memmove.c */
#ifdef __STDC__
void *eb_memmove(void *, const void *, size_t);
#else
char *eb_memmove();
#endif

/* strcasecmp.c */
int eb_strcasecmp EB_P((const char *, const char *));
int eb_strncasecmp EB_P((const char *, const char *, size_t));

#endif /* not EB_INTERNAL_H */
