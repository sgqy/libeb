これは ./eb-ja.info、./eb-ja.texi より makeinfo バージョン 4.5
によって作成されました。

INFO-DIR-SECTION CD-ROM Book Utilities
START-INFO-DIR-ENTRY
* eb-ja: (eb-ja).               C library for accessing CD-ROM book.
END-INFO-DIR-ENTRY

   EB Library: CD-ROM 書籍にアクセスするための C ライブラリ, 笠原基之

   Copyright (C) 1998, 99  Motoyuki Kasahara

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by Free Software Foundation, Inc.


File: eb-ja.info,  Node: EB_Appendix,  Next: Appendix Subbook,  Prev: Appendix Data,  Up: Appendix Data

`EB_Appendix' オブジェクト
==========================

   CD-ROM 書籍本体を扱うには `EB_Book' オブジェクトを用いましたが、
appendix を扱うには `EB_Appendix' オブジェクトを使います。
`EB_Appendix' オブジェクトを操作するための関数は、`EB_Book' のものとは
異なりますが、操作手順はよく似ています。

   `EB_Appendix' オブジェクトは、個々の appendix に対して 1 個ずつ作る
必要があります。

     EB_Appendix app;

もちろん、オブジェクトの領域は、`malloc()' で確保しても構いません。

     EB_Appendix *app_pointer;
     
     app_pointer = (EB_Appendix *) malloc(sizeof(EB_Appendix));

   オブジェクトは、使う前に必ず `eb_initialize_appendix()' という関数
で中身を初期化しなくてはなりません。 `EB_Book' オブジェクトでも
`eb_initialize_book()'
で初期化する必要がありましたが、それと同じです。

     eb_initialize_appendix(&app);
     eb_initialize_appendix(app_pointer);

   続いて、オブジェクトを appendix の実体に結び付けるために、
`eb_bind_appendix()' を呼び出します。 これは、 `EB_Book' オブジェクトの
`eb_bind()' に相当します。

     ＥＢ＿Ａｐｐｅｎｄｉｘ　　　　　　　　　　ａｐｐｅｎｄｉｘ
     オブジェクト　　　　　　　　　　　　┌────────────┐
     ┌───┐　　　　　　　　　　　　　│　　　　　　　　　　　　│
     │　　　┝━━━━━━━━━━━━━┥　／ｍｎｔ／ｄｉｃｔ　　│
     └───┘　ｅｂ＿ｂｉｎｄ　　　　　│　　　　　　　　　　　　│
     　　　　　　＿ａｐｐｅｎｄｉｘ（）　└────────────┘

実際のプログラムでは、次のようにします。

     if (eb_bind_appendix(&app, "/mnt/dict") != EB_SUCCESS) {
         printf("eb_bind_appendix() failed\n");
         return;
     }

`eb_bind_appendix()' に渡す appendix のパス (この例では `/mnt/dict') は
appendix のトップディレクトリ、つまり `catalog' または `catalogs' ファ
イルのあるディレクトリを指定します。 パスには、遠隔アクセス識別子 (例 :
`ebnet://localhost/dict.app') を指定することも可能です。

   `EB_Appendix' オブジェクトを使い終わったら、
`eb_finalize_appendix()' を呼んで後始末をします。 オブジェクトは
appendix との結び付きを解かれた状態に戻り、 内部で割り当てられたメモリ
は解放され、開いていたファイルもすべて閉じられます。

     eb_finalize_appendix(&app);
     eb_finalize_appendix(app_pointer);

オブジェクトの領域を `malloc()' で確保した場合は、
`eb_finalize_appendix()' を呼んだ後ならば、オブジェクトの領域を安全に
解放することができます。

     free(app_pointer);


File: eb-ja.info,  Node: Appendix Subbook,  Next: Appendix Stop Code,  Prev: EB_Appendix,  Up: Appendix Data

副本
====

   CD-ROM と同様に、appendix にも副本が存在します。 appendix の副本も、
副本コードを使って識別します。 個々の副本コードは、appendix 内で同じも
のがないようになっています。

   CD-ROM 書籍内のすべての副本の副本コードを取得する関数として
`eb_subbook_list()' がありましたが、 appendix にも
`eb_appendix_subbook_list()' という同様の関数があります。

     /* `app' が `EB_Appendix' のオブジェクトで、すでに書籍に
      * 結び付けられていると仮定しています。*/
     EB_Subbook_Code sub_codes[EB_MAX_SUBBOOKS];
     int sub_count;
     
     if (eb_appendix_subbook_list(&app, sub_codes, &sub_count)
         != EB_SUCCESS) {
         printf("eb_appendix_subbook_list() failed\n");
         return;
     }

`eb_appendix_subbook_list()' が成功すると、書籍内のすべての副本コード
が配列 `sub_codes[]' に格納されます。 配列の先頭の副本コードは
`sub_codes[0]' と表され、次のコードは `sub_codes[1]'、という具合になり
ます。 副本の個数は、`sub_count' に格納されます。

   `EB_Book' と同様に `EB_Appendix' オブジェクトでも、 結びつけられた
CD-ROM 書籍の中の任意の副本から一つ選んで、 "選択中の副本 (current
subbook)" として指定することができます。 複数の副本を、同時に選択するこ
とはできません。 区切りコードや外字の代替文字列といった appendix 内のデ
ータへのアクセスは、選択中の副本に対してだけ行えます。

   以下は、先頭の副本 (`sub_codes[0]') を選択する場合の例です。

     /* `app' が `EB_Appendix' のオブジェクトで、すでに書籍に
      * 結び付けられていると仮定しています。*/
     if (eb_set_appendix_subbook(&app, sub_codes[0]) != EB_SUCCESS) {
         printf("eb_subbook_list() failed\n");
         return;
     }

   `eb_bind_appendix()' で `EB_Appendix' オブジェクトを appendix に結び
付けた直後は、いずれの副本も選択されていない状態になっています。


File: eb-ja.info,  Node: Appendix Stop Code,  Next: Appendix Alternation Text,  Prev: Appendix Subbook,  Up: Appendix Data

本文の区切りコード
==================

   CD-ROM 書籍によっては、EB ライブラリが本文の表示を正しい位置で止めら
れないことがあります (詳しくは、*note 区切りコードの問題 : Stop Code
Issue.)。 これは、本文の区切りコードの推測を EB ライブラリが誤ったため
に起こるのですが、 appendix データを使うことで、正しい区切りコードを EB
ライブラリに教えてやることができます。

   CD-ROM 書籍の本文を取得する関数 `eb_read_text()' は第 2 引数に
`EB_Appendix *' をとるのですが、ここに appendix オブジェクトを渡してや
るようにします。

     /* `book', `app' は、それぞれ `EB_Book' および
      * `EB_Appendix' のオブジェクトで、どちらもすでに副本を選択中と
      * 仮定しています。*/
     #define MAX_LENGTH 1000
     char buffer[MAX_LENGTH + 1];
     ssize_t text_length;
     
     if (eb_read_text(&book, &app, NULL, NULL, MAX_LENGTH,
         text, &text_length) != EB_SUCCESS) {
         fprintf(stderr, "an error occurs.\n");
         return;
     }

`eb_read_text()' は、渡された appendix
オブジェクトが副本を選択済みで、かつ区切りコードの情報を持っていれば、
その区切りコードを使用します。


File: eb-ja.info,  Node: Appendix Alternation Text,  Next: Appendix Data Types,  Prev: Appendix Stop Code,  Up: Appendix Data

外字の代替文字列
================

   CD-ROM 書籍は、定義している外字の情報としてフォントのデータしか用意
していません。 つまり、その外字がどのような文字なのかをユーザに分かる
ようにするには、 アプリケーションがフォントを表示するしかありません。
しかしこれでは、テキストインターフェースを用いたアプリケーションでは、
本文中の外字の部分がまったく分かりません。 外字を多用している書籍では、
本文が解読不能に近い状態になるかも知れません。

   そこで EB ライブラリでは、外字の代替となる文字列を appendix
内で定義できるようにしています。 appendix が用意されている場合に限り、
アプリケーションは外字のフォントを描画する代わりにその代替文字列を出力
することにすれば、 テキストインターフェースを用いたアプリケーションでも
書籍が読み易くなります。

   appendix に定義されている代替文字列を取り出す関数は、2 つあります。
半角外字用の `eb_narrow_alt_character_text()' と全角外字用の
`eb_wide_alt_character_text()' です。 どちらも、使い方は変わりません。

   以下の例では、半角外字の文字番号 0xa121 に対する代替文字列を `buffer'
に格納しています。

     /* `app' が `EB_Appendix' のオブジェクトで、すでに副本を
      * 選択中であると仮定しています。*/
     char buffer[EB_MAX_ALTERNATION_TEXT_LENGTH + 1];
     
     if (eb_narrow_alt_character_text(&app, buffer, 0xa121)
         != EB_SUCCESS) {
         printf("eb_narrow_alt_character_text() failed\n");
         return;
     }

外字は個々の副本に対して定義されているので、代替文字列を取り出すには、
あらかじめ副本を選択しておく必要があります。 外字のフォントを取り出す際
は、これに加えて外字の「高さ」も選択しておく必要がありましたが、代替文
字列には高さの概念がないので必要ありません。

   代替文字列は最長で `EB_MAX_ALTERNATION_TEXT_LENGTH' バイト (= 31 バ
イト) です。 ただし、この長さにはナル文字の分は含んでいないので、
`buffer' はもう 1 バイト分余裕を持たせています。


File: eb-ja.info,  Node: Appendix Data Types,  Next: Appendix Functions,  Prev: Appendix Alternation Text,  Up: Appendix Data

データ型の詳細
==============

   この節で説明しているデータ型を使うには、次のようにヘッダファイルを
読み込んで下さい。

     #include <eb/appendix.h>

 - Data type: EB_Appendix
     `EB_Appendix' 型は、一冊の CD-ROM 書籍を表します。 CD-ROM 書籍への
     アクセスは、すべてこの型のオブジェクトを介して行います。 同時に複
     数の CD-ROM 書籍にアクセスする際は、書籍一冊毎にオブジェクトを作
     る必要があります。

     `EB_Appendix' オブジェクトの操作は、すべて EB ライブラリが用意して
     いる関数で行います。 アプリケーションプログラムは、直接
     `EB_Appendix' オブジェクトのメンバを参照したり、セットしたりすべ
     きではありません。

     `EB_Appendix' オブジェクトを使用する際は、まずそのオブジェクトに対
     して `eb_initialize_book()' を呼んで初期化しなくてはなりません。


File: eb-ja.info,  Node: Appendix Functions,  Next: Appendix Sample,  Prev: Appendix Data Types,  Up: Appendix Data

関数の詳細
==========

   この節で説明している関数を使うには、次のようにヘッダファイルを読み込
んで下さい。

     #include <eb/appendix.h>

 - 機能: void eb_initialize_appendix (EB_Appendix *APP)
     関数 `eb_initialize_appendix()' は、APP の指す `EB_Appendix' オブ
     ジェクトを初期化します。 `EB_Appendix' オブジェクトに対して EB ラ
     イブラリの他の関数を呼ぶ前に、 必ずそのオブジェクトを初期化しなく
     てはなりません。 初期化していないオブジェクトに対して、EB ライブラ
     リの他の関数を呼んだ場合の動作は未定義です。 また、すでに初期化し
     たオブジェクトに対して、 再度 `eb_initialize_appendix()' を呼んで
     はいけません。 呼んだ場合の動作は未定義です。

 - 機能: void eb_finalize_appendix (EB_Appendix *APP)
     関数 `eb_finalize_appendix()' は、APP が指す `EB_Appendix' オブジ
     ェクトの後始末を行います。

     オブジェクトが割り当てて管理していたメモリはすべて解放され、 ファ
     イルディスクリプタもすべて閉じられます。 オブジェクトが appendix
     と結び付いていた場合は、結び付きが解かれます。

     後始末をしたオブジェクトに対して `eb_bind_appendix()'
     を呼ぶことで、 オブジェクトを再利用することができます。

 - 機能 : EB_Error_Code eb_bind_appendix (EB_Appendix *APP, const char
          *PATH)
     関数 `eb_bind_appendix()' は、APP の指す `EB_Appendix' オブジェク
     トを、パス PATH にある appendix に結び付けます。 パスには、
     appendix のトップディレクトリか遠隔アクセス識別子を指定します。
     appendix のトップディレクトリとは、`catalog' あるいは `catalogs'
     ファイルの存在するディレクトリを指します。

     オブジェクトがすでにappendix に結び付いていた場合、その appendix
     との結び付きを解いてから、PATH にある appendix に結び付けます。

     成功すると、関数は `EB_SUCCESS' を返します。 このとき、副本は未選
     択の状態になります。 失敗すると、オブジェクトを appendix との結び
     付きを解かれた状態にして、 原因を示すエラーコードを返します。

     PATH は、 `EB_MAX_PATH_LENGTH'
     バイトに収まていなくてはなりません。 さらに、PATH が相対パスのとき
     は、絶対パスに変換した結果がこの長さに収まっていなくてはなりませ
     ん。 これを超えると、`EB_ERR_TOO_LONG_FILE_NAME' を返します。

 - 機能: int eb_is_appendix_bound (EB_Appendix *APP)
     関数 `eb_is_appendix_bound()' は、APP が appendix に結び付いてい
     るかどうかを調べます。 結び付いていれば 1 を返し、そうでなければ 0
     を返します。

 - 機能: EB_Error_Code eb_appendix_path (EB_Appendix *APP, char *PATH)
     関数 `eb_appendix_path()' は、APP に結び付いている appendix のパス
     もしくは遠隔アクセス識別子を、PATH の指す領域に書き込みます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、PATH の指
     す領域に空文字列を書き込み、原因を示すエラーコードを返します。

     APP は、あらかじめ書籍に結び付いている必要があります。 結びついて
     いない場合は、`EB_ERR_UNBOUND_BOOK' を返します。

     PATH に書き込むパス名のバイト数は、最長で `EB_MAX_PATH_LENGTH' に
     なります。 この長さは、末尾のナル文字を含みません。 関数が返すパス
     は正規化された形になっているので、`eb_bind_appendix()' に渡したと
     きのものと同じとは限りません。 たとえば、相対パスだった場合は、絶
     対パスに変換されます。

 - 機能: EB_Error_Code eb_load_all_appendix_subbooks (EB_Appendix *APP)
     関数 `eb_load_all_appendix_subbooks()' は、APP 内のすべての副本を
     初期化します。 通常、副本の初期化は、その副本が初めて選択されたと
     きに自動的に行われますが、 この関数は初期化を前倒しで行います。 初
     期化の対象となるのは、この関数を呼び出した時点でまだ初期化していな
     い すべての副本です。 この関数は、スタンドアロンで動作するサーバア
     プリケーションなどで有効です。 クライアントからの接続を受ける前に
     この関数を呼ぶことで、副本の初期化のためにクライアントを待たせな
     くて済みます。

     初期化の対象となったすべての副本の初期化に成功すれば、関数は
     `EB_SUCCESS' を返します。 一冊でも初期化に失敗した場合は、残りの副
     本の初期化を諦め、原因を示すエラーコードを返します。

     APP は、あらかじめ appendix に結び付けられていなくてはなりません。
     結びついていない場合は、`EB_ERR_UNBOUND_APP' を返します。

     この関数を呼び出すと、APP は、副本を選択していない状態になります。

 - 機能 : EB_Error_Code eb_appendix_subbook_list (EB_Book *APP,
          EB_Subbook_Code *SUBBOOK_LIST, int *SUBBOOK_COUNT)
     関数 `eb_appendix_subbook_list()' は、APP 内のすべて副本の副本コ
     ードを `EB_Subbook_Code' 型の配列にして、SUBBOOK_LIST の指す領域に
     書き込みます。 配列は、最大で `EB_MAX_SUBBOOKS'
     個の要素を持ちます。 加えて、 appendix が収録している副本の個数を
     SUBBOOK_COUNT の指す領域に書き込みます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、
     SUBBOOK_COUNT の指す領域に 0 を書き込み、原因を示すエラーコードを
     返します。

     APP は、あらかじめ appendix に結び付けられていなくてはなりません。
     結びついていない場合は、`EB_ERR_UNBOUND_APP' を返します。

 - 機能 : EB_Error_Code eb_appendix_subbook (EB_Book *APP,
          EB_Subbook_Code *SUBBOOK_CODE)
     関数 `eb_appendix_subbook()' は、 APP が選択中の副本の副本コードを
     SUBBOOK_CODE の指す領域に書き込みます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、
     SUBBOOK_CODE の指す領域に `EB_SUBBOOK_INVALID' を書き込み、原因を
     示すエラーコードを返します。

     あらかじめ、APP はいずれかの副本を選択していなくてはなりません。
     選択していない場合は、`EB_ERR_NO_CUR_APPSUB' を返します。

 - 機能 : EB_Error_Code eb_appendix_subbook_directory (EB_Book *APP,
          char *DIRECTORY)
     関数 `eb_appendix_subbook_directory()' は、APP 内で現在選択中の副
     本のデータファイルを収めたディレクトリ名を、DIRECTORY の指す領域
     に書き込みます。

     ディレクトリ名の文字列の長さは、最長で
     `EB_MAX_DIRECTORY_NAME_LENGTH' バイトです。 この長さに、末尾のナル
     文字は含みません。 ディレクトリ名は ASCII の数字、英小文字、アンダ
     ースコアで構成されます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、 DIRECTORY
     の指す領域に空文字列を書き込み、原因にを示すエラーコードを返しま
     す。

     あらかじめ、 APP
     内のいずれかの副本が選択されていなくてはなりません。 選択していな
     い場合は、`EB_ERR_NO_CUR_APPSUB' を返します。

 - 機能 : EB_Error_Code eb_appendix_subbook_directory2 (EB_Book *APP,
          EB_Subbook_Code SUBBOOK_CODE, char *DIRECTORY)
     `eb_appendix_subbook_directory()'
     と似ていますが、選択中の副本ではなく、引数 SUBBOOK_CODE で指定され
     た副本のディレクトリ名を書き込む点が異なります。

     APP は副本を選択していなくても構いませんが、あらかじめ appendix に
     結び付けられていなければなりません。 結びついていない場合は、
     `EB_ERR_UNBOUND_APP' を返します。

 - 機能 : EB_Error_Code eb_set_appendix_subbook (EB_Book *APP,
          EB_Subbook_Code CODE)
     関数 `eb_set_appendix_subbook()' は、 APP の副本 CODE
     を選択します。 すでに副本を選択していた場合は、いったん未選択の状
     態にしてから副本 SUBBOOK_CODE を選択します。

     成功すると、関数は `EB_SUCCESS' を返します。 このとき、外字は未選
     択の状態となり、検索、テキストデータの読み込み、 バイナリデータの
     読み込みについての状態記録は、すべてリセットされます。
     失敗すると、副本を未選択の状態にして、原因を示すエラーコードを返し
     ます。

     あらかじめ、 APP は appendix に結び付けられていなければなりません。
     結びついていない場合は、`EB_ERR_UNBOUND_APP' を返します。

 - 機能: void eb_unset_appendix_subbook (EB_Book *APP)
     関数 `eb_unset_appendix_subbook()' は、APP が選択している副本を未
     選択の状態にします。 APP が appendix に結び付いていないか、副本が
     選択されていない場合は、 何もしません。

 - 機能: int eb_have_stop_code (EB_Book *APP)
     関数 `eb_have_stop_code()' は、APP が選択中の副本で区切りコードが
     定義されているかどうかを調べます。

     定義していれば 1 を返します。 定義していないか、そもそも副本が選択
     されていない場合は 0 を返します。

 - 機能: EB_Error_Code eb_stop_code (EB_Book *APP, int *STOP_CODE)
     関数 `eb_stop_code()' は、APP が選択中の副本で定義している区切り
     コードを STOP_CODE の指す領域に書き込みます。 STOP_CODE[0],
     STOP_CODE[1] に、区切りコードの値としてそれぞれ `0x0000' 〜
     `0xffff' が書き込まれます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、関数は
     STOP_CODE[0] と STOP_CODE[1] に `-1' を書き込み、原因を示すエラー
     コードを返します。

     あらかじめ、APP は副本を選択していなくてはなりません。 選択してい
     ない場合は、`EB_ERR_NO_CUR_APPSUB' を返します。 副本が区切りコード
     を定義していない場合は、`EB_ERR_NO_STOPCODE' を返します。

 - 機能: int eb_have_narrow_alt (EB_Book *APP)
 - 機能: int eb_have_wide_alt (EB_Book *APP)
     関数 `eb_have_narrow_alt()' は、選択中の副本が半角外字に対する代
     替文字列を定義しているかどうかを調べます。 同様に、関数
     `eb_have_wide_alt()' は、全角外字に対する代替文字列を定義している
     かどうかを調べます。

     定義していれば 1 を、定義していなければ 0 を返します。 APP が副本
     を選択していない場合も 0 を返します。

 - 機能: EB_Error_Code eb_narrow_alt_start (EB_Book *APP, int *START)
 - 機能: EB_Error_Code eb_wide_alt_start (EB_Book *APP, int *START)
     関数 `eb_narrow_alt_start()' は、APP が選択中の副本における半角外
     字に対する代替文字列の定義範囲を調べ、先頭の文字番号 (半角外字の
     文字番号の中で最小のもの) を START の指す領域に書き込みます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、原因を示
     すエラーコードを返します。

     あらかじめ、APP は副本を選択していなくてはなりません。 選択してい
     ない場合は、`EB_ERR_NO_CUR_APPSUB' を返します。 副本が半角外字に対
     する代替文字列を定義していない場合は、 `EB_ERR_NO_ALT'
     を返します。

     関数 `eb_wide_font_start()' は、半角外字ではなく全角外字について
     調べるという点を除いて、`eb_narrow_font_start()' と同じです。

 - 機能: EB_Error_Code eb_narrow_alt_end (EB_Book *APP, int *END)
 - 機能: EB_Error_Code eb_wide_alt_end (EB_Book *APP, int *END)
     関数 `eb_narrow_alt_end()' は、APP が選択中の副本における半角外字
     に対する代替文字列の定義範囲を調べ、最後の文字番号 (半角外字の文
     字番号の中で最大のもの) を START の指す領域に書き込みます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、原因を示
     すエラーコードを返します。

     あらかじめ、APP は副本を選択していなくてはなりません。 選択してい
     ない場合は、`EB_ERR_NO_CUR_APPSUB' を返します。 副本が半角外字に対
     する代替文字列を定義していない場合は、 `EB_ERR_NO_ALT'
     を返します。

     関数 `eb_wide_font_start()' は、半角外字ではなく全角外字について
     調べるという点を除いて、`eb_narrow_font_start()' と同じです。

 - 機能 : EB_Error_Code eb_narrow_alt_character_text (EB_Book *APP, int
          `character_number', char *TEXT)
 - 機能 : EB_Error_Code eb_wide_alt_character_text (EB_Book *APP, int
          `character_number', char *TEXT)
     関数 `eb_narrow_alt_character_text()' は、BOOK が選択中の副本で定
     義している、半角外字の代替文字列を取り出します。
     外字の文字番号を、CHARACTER_NUMBER で指定します。

     成功すると、関数は代替文字列を TEXT の指す領域に書き込み、
     `EB_SUCCESS' を返します。 失敗すると、TEXT の指す領域に空文字列を
     書き込み、原因を示すエラーコードを返します。

     代替文字列は最長で `EB_MAX_ALTERNATION_TEXT_LENGTH' バイト (= 31
     バイト) です。
     ただし、この長さにはナル文字の分は含んでいないので、TEXT の領域に
     はもう 1 バイト分必要です。

     代替文字列がどの文字コードで書かれているかは、appendix の中には記
     録されていません。 しかし、appendix は必ず特定の書籍に対応して作成
     されるものなので、書籍の文字コードから次のように判断すれば、問題
     ないでしょう。

        * 書籍が ISO 8859-1 で書かれている場合は、代替文字列も ISO
          8859-1

        * それ以外の場合、代替文字列は日本語 EUC

     あらかじめ、APP は副本を選択していなくてはなりません。 選択してい
     ない場合は、 `EB_ERR_NO_CUR_APPSUB' を返します。 文字番号
     CHARACTER_NUMBER が外字の定義範囲外にある場合は、
     `EB_ERR_NO_SUCH_CHAR_TEXT' を返します。

     副本が半角外字に対する代替文字列を (CHARACTER_NUMBER に限らずまっ
     たく) 定義していない場合は、`EB_ERR_NO_ALT' を返します。 そうでは
     なく、一部の文字番号については半角外字に対する代替文字列を定義し
     ているものの、 CHARACTER_NUMBER
     に対する代替文字列は存在しない場合、関数は `EB_SUCCESS' を返し、
     TEXT の指す領域には空文字列が書き込まれます。

     関数 `eb_wide_alt_character_text()' は、半角外字ではなく全角外字
     に対する代替文字列を取り出すという点を除いて、
     `eb_narrow_alt_character_text()' と同じです。

 - 機能 : EB_Error_Code eb_backward_narrow_alt_character (EB_Book *BOOK,
          int N, int *CHARACTER_NUMBER)
 - 機能 : EB_Error_Code eb_backward_wide_alt_character (EB_Book *BOOK,
          int N, int *CHARACTER_NUMBER)
     関数 `eb_forward_narrow_alt_character()' は、APP が選択中の副本に
     おいて定義されている、半角外字に対する代替文字列の文字番号
     CHARACTER_NUMBER の N
     個後ろに位置する文字の文字番号を取得します。

     まず、関数を呼び出す際に、CHARACTER_NUMBER の指す領域に文字番号を
     書き込んでおきます。 関数の処理が成功すると、戻ったときに N 個分だ
     け後方の文字番号に書き換わっています。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、原因を示
     すエラーコードを返します。

     あらかじめ、APP は副本を選択していなくてはなりません。 選択してい
     ない場合は、`EB_ERR_NO_CUR_APPSUB' を返します。 副本が半角外字に対
     する代替文字列を定義していない場合は、 `EB_ERR_NO_ALT'
     を返します。

     N 個後ろにもう外字がない場合や、呼び出した際に CHARACTER_NUMBER の
     指す領域に書き込んであった文字番号が外字の定義範囲外にある場合は
     `EB_ERR_NO_SUCH_CHAR_TEXT' を返します。

     N には負の数を指定することもできます。 この場合、次の呼び出しと等
     価になります。

          /* n < 0 とする */
          eb_backward_narrow_font_character (book, -n, character_number);

     関数 `eb_forward_wide_alt_character()' は、半角外字ではなく全角外
     字について操作するという点を除いて、
     `eb_forward_narrow_alt_character()' と同じです。


File: eb-ja.info,  Node: Appendix Sample,  Prev: Appendix Functions,  Up: Appendix Data

サンプルプログラム
==================

     /*
      * 使用方法:
      *     font <appendix-path> <subbook-index>
      * 例:
      *     font /cdrom 0
      * 説明:
      *     <appendix-path> で指定した appendix から特定の副本を選び、そ
      *     の副本が定義している半角外字の代替文字列をすべて表示します。
      *
      *     その appendix が、半角外字の代替文字列を定義していないと、エ
      *     ラーになります。
      *
      *     <subbook-index> には、操作対象の副本のインデックスを指定しま
      *     す。インデックスは、書籍の最初の副本から順に 0、1、2 ... に
      *     なります。
      */
     #include "config.h"
     
     #include <stdio.h>
     #include <stdlib.h>
     
     #include <eb/eb.h>
     #include <eb/error.h>
     #include <eb/appendix.h>
     
     int
     main(argc, argv)
         int argc;
         char *argv[];
     {
         EB_Error_Code error_code;
         EB_Appendix app;
         EB_Subbook_Code subbook_list[EB_MAX_SUBBOOKS];
         int subbook_count;
         int subbook_index;
         int alt_start;
         char text[EB_MAX_ALTERNATION_TEXT_LENGTH + 1];
         int i;
     
         /* コマンド行引数をチェック。*/
         if (argc != 3) {
             fprintf(stderr, "Usage: %s appendix-path subbook-index\n",
                 argv[0]);
             exit(1);
         }
     
         /* EB ライブラリと `app' を初期化。*/
         eb_initialize_library();
         eb_initialize_appendix(&app);
     
         /* appendix を `app' に結び付ける。*/
         error_code = eb_bind_appendix(&app, argv[1]);
         if (error_code != EB_SUCCESS) {
             fprintf(stderr, "%s: failed to bind the app, %s: %s\n",
                 argv[0], eb_error_message(error_code), argv[1]);
             goto die;
         }
     
         /* 副本の一覧を取得。*/
         error_code = eb_appendix_subbook_list(&app, subbook_list,
             &subbook_count);
         if (error_code != EB_SUCCESS) {
             fprintf(stderr, "%s: failed to get the subbook list, %s\n",
                 argv[0], eb_error_message(error_code));
             goto die;
         }
     
         /* 副本のインデックスを取得。*/
         subbook_index = atoi(argv[2]);
     
         /*「現在の副本 (current subbook)」を設定。*/
         if (eb_set_appendix_subbook(&app, subbook_list[subbook_index])
             < 0) {
             fprintf(stderr, "%s: failed to set the current subbook, %s\n",
                 argv[0], eb_error_message(error_code));
             goto die;
         }
     
         /* 外字の開始位置を取得。*/
         error_code = eb_narrow_alt_start(&app, &alt_start);
         if (error_code != EB_SUCCESS) {
             fprintf(stderr, "%s: failed to get font information, %s\n",
                 argv[0], eb_error_message(error_code));
             goto die;
         }
     
         i = alt_start;
         for (;;) {
             /* 外字の代替文字列を取得。*/
             error_code = eb_narrow_alt_character_text(&app, i, text);
             if (error_code != EB_SUCCESS) {
                 fprintf(stderr, "%s: failed to get font data, %s\n",
                     argv[0], eb_error_message(error_code));
                 goto die;
             }
     
             /* 取得した代替文字列を出力。*/
             printf("%04x: %s\n", i, text);
     
             /* 外字の文字番号を一つ進める。*/
             error_code = eb_forward_narrow_alt_character(&app, 1, &i);
             if (error_code != EB_SUCCESS)
                 break;
         }
     
         /* appendix と EB ライブラリの利用を終了。*/
         eb_finalize_appendix(&app);
         eb_finalize_library();
         exit(0);
     
         /* エラー発生で終了するときの処理。*/
       die:
         eb_finalize_appendix(&app);
         eb_finalize_library();
         exit(1);
     }


File: eb-ja.info,  Node: Book List on Server,  Next: Indice,  Prev: Appendix Data,  Up: Top

サーバ上の書籍一覧
******************

   EBNET サーバから遠隔アクセスを行う際、サーバがそのクライアントに対し
て アクセスを許可している書籍や appendix データの一覧を取得することが
できます。

   このとき、 EBNET サーバを指定する遠隔アクセス記述子には、特定の書籍や
appendix データに対するアクセスとは異なり、書籍名は指定しません。 すな
わち、一般形は次のようになります。

     ebnet://ホスト:ポート/

末尾の `/' はなくても構いません。 `:' とそれに続くポート番号は省略可能
で、その場合は 22010 番ポートを利用することを意味します。

   ebinfo コマンドの -book-list オプション指定時の挙動は、 EB
ライブラリのこの機能によって実装されています。 (ebinfo
についての詳細は、 *note EBNET サーバの書籍一覧 : (ebinfo-ja)Book list
on EBNET server.。)

     % ebinfo --book-list ebnet://localhost
     名前             題名
     encycl           ブラウンコンサイス百科事典
     encycl.app       ブラウンコンサイス百科事典 (appendix)
     crossword        クロスワードパズル辞典
     travel           ワールドトラベルガイド

   名前の末尾が `.app' になっているものは appendix データで、その他は
書籍本体です。 この例の書籍 `encycl' に対してアクセスするなら、遠隔アク
セス識別子は `ebnet://localhost/encycl' になります。

   なお、クライアントに対してアクセスを許可していない書籍や appendix デ
ータは、サーが側で一覧から除外されます。

* Menu:

* EB_BookList Object::          `EB_BookList' オブジェクト
* BookList Data::               データ型の詳細
* BookList Functions::          関数の詳細
* BookList Sample::             サンプルプログラム


File: eb-ja.info,  Node: EB_BookList Object,  Next: BookList Data,  Prev: Book List on Server,  Up: Book List on Server

`EB_BookList' オブジェクト
==========================

   EBNET サーバの提供する書籍および appendix
データの一覧を取得するには、 まず `EB_BookList' 型のオブジェクトを用意
する必要があります。

     EB_BookList bl;

オブジェクトの領域は、`malloc()' で確保しても構いません。

     EB_BookList *bl_pointer;
     
     bl_pointer = (EB_BookList *) malloc(sizeof(EB_BookList));

   `EB_Book' オブジェクトと同様に、`EB_BookList' オブジェクトも使う前
に中身を初期化する必要があります。 これは、`eb_initialize_booklist()'
という関数で行います。

     eb_initialize_booklist(&bl);
     eb_initialize_booklist(bl_pointer);

   初期化が完了したら、特定のサーバとオブジェクトを結びつけます。 たと
えば、`ebnet://localhost' で表されるサーバに対して、オブジェクトを結び
つけるには次のようにします。

     if (eb_bind_booklist(&bl, "ebnet://localhost") != EB_SUCCESS) {
         printf("eb_bind_booklist() failed\n");
         return;
     }

これはちょうど、`EB_Book' オブジェクトに対して `eb_bind()' を呼ぶのと同
じです。

   こうして、ようやく書籍一覧の情報を取り出すことができます。 これには
`eb_booklist_book_count()', `eb_booklist_book_name()',
`eb_booklist_book_title()' という 3 つの関数を使用します。 これらの関数
はそれぞれ、クライアントがアクセス可能な書籍の数、各書籍および
appendix データの名称 (アクセス識別子として指定する名前)、 各書籍と
appendix データの題名を得ることができます。

     char *name, *title;
     int count, i;
     
     count = eb_booklist_book_count(&bl);
     for (i = 0; i < count; i++) {
         if (eb_booklist_book_name(&bl, i, &name) != EB_SUCCESS) {
             printf("eb_booklist_book_name(%d) failed\n", i);
             return;
         }
         if (eb_booklist_book_title(&bl, i, &title) != EB_SUCCESS) {
             printf("eb_booklist_book_title(%d) failed\n", i);
             return;
         }
         printf("name = %s, title = %s\n", name, title);
     }

`EB_BookList' オブジェクトを使い終わったら、必ず後始末を行います。

     eb_finalize_booklist(&bl);
     eb_finalize_booklist(bl_pointer);

   オブジェクトの領域を `malloc()' で確保した場合は、
`eb_finalize_booklist()' を呼んだ後ならば、オブジェクトの領域を安全に
解放することができます。

     free(bl_pointer);


File: eb-ja.info,  Node: BookList Data,  Next: BookList Functions,  Prev: EB_BookList Object,  Up: Book List on Server

データ型の詳細
==============

   この節で説明しているデータ型を使うには、次のようにヘッダファイルを
読み込んで下さい。

     #include <eb/booklist.h>

 - Data type: EB_BookList
     `EB_BookList' 型は、EBNET サーバ上が使っている書籍および appendix
     の一覧を取得する際に用いるオクジェクトの型です。

     `EB_BookList' オブジェクトを使用する際は、まずそのオブジェクトに
     対して `eb_initialize_booklist()'
     を呼んで初期化する必要があります。


File: eb-ja.info,  Node: BookList Functions,  Next: BookList Sample,  Prev: BookList Data,  Up: Book List on Server

関数の詳細
==========

   この節で説明している関数を使うには、次のようにヘッダファイルを読み込
んで下さい。

     #include <eb/booklist.h>

 - 機能: void eb_initialize_booklist (EB_BookList *BL)
     関数 `eb_initialize_booklist()' は、BL の指す `EB_BookList' オブジ
     ェクトを初期化します。 `EB_BookList' オブジェクトに対して EB ライ
     ブラリの他の関数を呼ぶ前に、必ずそのオブジェクトを初期化しなくて
     はなりません。 初期化していないオブジェクトに対して、EB ライブラリ
     の他の関数を呼んだ場合の動作は未定義です。 また、すでに初期化した
     オブジェクトに対して、 再度 `eb_initialize_booklist()' を呼んでは
     いけません。 呼んだ場合の動作は未定義です。

 - 機能 : EB_Error_Code eb_bind_booklist (EB_BookList *BL, const char
          *PATH)
     関数 `eb_bind_booklist()' は、APP の指す `EB_BookList' オブジェク
     トを、遠隔アクセス記述子 PATH で指定された EBNET サーバに結び付け
     ます。

     オブジェクトがすでにサーバに結び付いていた場合、そのサーバとの結び
     付きを解いてから、PATH にあるサーバに結び付けます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、オブジェ
     クトをサーバとの結び付きを解かれた状態にして、原因を示すエラーコ
     ードを返します。

     PATH は、 `EB_MAX_PATH_LENGTH'
     バイトに収まていなくてはなりません。 これを超えると、
     `EB_ERR_TOO_LONG_FILE_NAME' を返します。 また、書籍名を指定してい
     ない遠隔アクセス記述子でなければなりません。 それ以外の形式だと、
     `EB_ERR_BAD_FILE_NAME' を返します。

     使用している EB ライブラリのバイナリが、遠隔アクセスに非対応のもの
     で ある場合、`EB_ERR_EBNET_UNSUPPORTED' が返ります。

 - 機能: void eb_finalize_booklist (EB_BookList *BL)
     関数 `eb_finalize_booklist()' は、BL が指す `EB_BookList' オブジェ
     クトの後始末を行います。

     オブジェクトが割り当てて管理していたメモリはすべて解放され、 ファ
     イルディスクリプタもすべて閉じられます。 オブジェクトが EBNET サー
     バと結び付いていた場合は、結び付きが解かれます。

     後始末をしたオブジェクトに対して `eb_bind_booklist()'
     を呼ぶことで、 オブジェクトを再利用することができます。

 - 機能: int eb_booklist_book_count (EB_BookList *BL)
     関数 `eb_booklist_book_count()' は、 EBNET
     サーバがこのクライアントに対してアクセスを許可している書籍および
     appendix データの数を取得します。

     オブジェクト BL の指す `EB_BookList' オブジェクトは、 あらかじめ
     EBNET サーバに結びついている必要があります。 結びついていない場合
     は、`EB_ERR_UNBOUND_BOOKLIST' を返します。

 - 機能 : EB_Error_Code eb_booklist_book_name (EB_BookList *BL, int I,
          char **NAME)
 - 機能 : EB_Error_Code eb_booklist_book_title (EB_BookList *BL, int I,
          char **TITLE)
     関数 `eb_booklist_book_name()' は、EBNET サーバの書籍や appendix
     データの名称を取得します。 ここで言う「名称」とは、遠隔アクセス識
     別子で指定する書籍名のことです。 つまり、`ebnet://localhost/dict'
     の `dict' の部分を指します。 同様に、関数
     `eb_booklist_book_title()' は、書籍や appendix
     の題名を取得します。

     いずれの関数も、EBNET サーバ上の何番目の書籍もしくは appendix の情
     報を取得するのかを、引数 I で指定します。 先頭は 1 番目ではなく 0
     番目になります。

     成功すると、関数は書籍の名称、題名へのポインタを *NAME, *TITLE に
     書き込み、`EB_SUCCESS' を返します。 なお、このポインタ値はオブジ
     ェクト `bl' が保持している文字列を指すようになっています。 `bl'
     に対して `eb_finalize_booklist()' を呼んでしまうと、この文字列も
     参照不可能になってしまいますので、注意して下さい。

     オブジェクト BL の指す `EB_BookList' オブジェクトは、 あらかじめ
     EBNET サーバに結びついている必要があります。 結びついていない場合
     は、`EB_ERR_UNBOUND_BOOKLIST' を返します。 また、I は 0 以上かつサ
     ーバが提供している書籍および appendix の総数未満でなければなりま
     せん。 これ以外の値のときは、`EB_ERR_NO_SUCH_BOOK' が返ります。


File: eb-ja.info,  Node: BookList Sample,  Prev: BookList Functions,  Up: Book List on Server

サンプルプログラム
==================

     /*
      * 使用方法:
      *     booklist <remote-access-ideintifier>
      * 例:
      *     booklist ebnet://localhost
      * 説明:
      *     <remote-access-ideintifier> で指定した EBNET サーバに接続し
      *     て、サーバの提供する書籍、appendix の一覧を表示します。
      */
     #include "config.h"
     
     #include <stdio.h>
     #include <stdlib.h>
     
     #include <eb/eb.h>
     #include <eb/error.h>
     #include <eb/booklist.h>
     
     int
     main(argc, argv)
         int argc;
         char *argv[];
     {
         EB_Error_Code error_code;
         EB_BookList bl;
         int book_count;
         char *name, *title;
         int i;
     
         /* コマンド行引数をチェック。*/
         if (argc != 2) {
             fprintf(stderr, "Usage: %s book-path remote-access-identifier\n",
                 argv[0]);
             exit(1);
         }
     
         /* EB ライブラリと `bl' を初期化。*/
         eb_initialize_library();
         eb_initialize_booklist(&bl);
     
         /* EBNET サーバを `bl' に結び付ける。*/
         error_code = eb_bind_booklist(&bl, argv[1]);
         if (error_code != EB_SUCCESS) {
             fprintf(stderr, "%s: failed to bind the EBNET server, %s: %s\n",
                 argv[0], eb_error_message(error_code), argv[1]);
             goto die;
         }
     
         /* サーバ上の書籍、appendix の個数を取得。*/
         error_code = eb_booklist_book_count(&bl, &book_count);
         if (error_code != EB_SUCCESS) {
             fprintf(stderr, "%s: failed to get the number of books, %s\n",
                 argv[0], eb_error_message(error_code));
             goto die;
         }
     
         for (i = 0; i < book_count; i++) {
             /* 書籍、appendix の名称を取得。*/
             error_code = eb_booklist_book_name(&bl, i, &name);
             if (error_code != EB_SUCCESS) {
                 fprintf(stderr, "%s: failed to get book name #%d, %s\n",
                     argv[0], i, eb_error_message(error_code));
                 goto die;
             }
     
                 }
             /* 書籍、appendix の題名を取得。*/
             error_code = eb_booklist_book_name(&bl, i, &title);
             if (error_code != EB_SUCCESS) {
                 fprintf(stderr, "%s: failed to get book title #%d, %s\n",
                     argv[0], i, eb_error_message(error_code));
                 goto die;
             }
     
             printf("%-20s  %s\n", name, title);
         }
     
         /* `bl' と EB ライブラリの利用を終了。*/
         eb_finalize_book(&bl);
         eb_finalize_library();
         exit(0);
     
         /* エラー発生で終了するときの処理。*/
       die:
         eb_finalize_book(&bl);
         eb_finalize_library();
         exit(1);
     }


File: eb-ja.info,  Node: Indice,  Prev: Book List on Server,  Up: Top

索引
****

* Menu:

* Data Type Index::             データ型の索引
* Function Index::              関数の索引
* Variable Index::              変数と定数の索引


File: eb-ja.info,  Node: Data Type Index,  Next: Function Index,  Prev: Indice,  Up: Indice

データ型の索引
==============

* Menu:

* Book <1>:                              EB_Book Data Types.
* Book:                                  Appendix Data Types.
* BookList:                              BookList Data.
* Character_Code:                        EB_Book Data Types.
* Disc_Code:                             EB_Book Data Types.
* Error_Code:                            Error Data Types.
* Font_Code:                             Font Data Types.
* Hit:                                   Search Data Types.
* Hook:                                  Text Data Types.
* Hook_Code:                             Text Data Types.
* Hookset:                               Text Data Types.
* Multi_Search_Code:                     Search Data Types.
* Position:                              Search Data Types.
* Subbook_Code:                          Subbook Data Types.


File: eb-ja.info,  Node: Function Index,  Next: Variable Index,  Prev: Data Type Index,  Up: Indice

関数の索引
==========

* Menu:

* appendix_path:                         Appendix Functions.
* appendix_subbook:                      Appendix Functions.
* appendix_subbook_directory:            Appendix Functions.
* appendix_subbook_list:                 Appendix Functions.
* backward_narrow_alt_character:         Appendix Functions.
* backward_narrow_font_character:        Font Functions.
* backward_text:                         Text Data Functions.
* backward_wide_alt_character:           Appendix Functions.
* backward_wide_font_character:          Font Functions.
* bind:                                  EB_Book Functions.
* bind_appendix:                         Appendix Functions.
* bind_booklist:                         BookList Functions.
* bitmap_to_bmp:                         Font Functions.
* bitmap_to_gif:                         Font Functions.
* bitmap_to_xbm:                         Font Functions.
* bitmap_to_xpm:                         Font Functions.
* booklist_book_count:                   BookList Functions.
* booklist_book_name:                    BookList Functions.
* booklist_book_title:                   BookList Functions.
* character_code:                        EB_Book Functions.
* copyright:                             Text Data Functions.
* current_candidate:                     Text Data Functions.
* decompose_movie_file_name:             Binary Data Functions.
* disc_type:                             EB_Book Functions.
* eb_compose_movie_file_name:            Binary Data Functions.
* error_message:                         Error Functions.
* error_string:                          Error Functions.
* finalize_appendix:                     Appendix Functions.
* finalize_book:                         EB_Book Functions.
* finalize_booklist:                     BookList Functions.
* finalize_hookset:                      Hookset Access Functions.
* finalize_library:                      Init and Exit Functions.
* font:                                  Font Functions.
* font_height:                           Font Functions.
* font_height2:                          Font Functions.
* font_list:                             Font Functions.
* forward_narrow_font_character:         Font Functions.
* forward_text:                          Text Data Functions.
* forward_wide_font_character:           Font Functions.
* have_copyright:                        Text Data Functions.
* have_endword_search:                   Search Functions.
* have_exactword_search:                 Search Functions.
* have_font:                             Font Functions.
* have_menu:                             Text Data Functions.
* have_multi_search:                     Search Functions.
* have_narrow_alt:                       Appendix Functions.
* have_narrow_font:                      Font Functions.
* have_stop_code:                        Appendix Functions.
* have_text:                             Text Data Functions.
* have_wide_alt:                         Appendix Functions.
* have_wide_font:                        Font Functions.
* have_word_search:                      Search Functions.
* hit_list:                              Search Functions.
* hook_empty:                            Builtin Hook Functions.
* hook_euc_to_ascii:                     Builtin Hook Functions.
* hook_narrow_character_text:            Builtin Hook Functions.
* hook_newline:                          Builtin Hook Functions.
* hook_wide_character_text:              Builtin Hook Functions.
* initialize_appendix:                   Appendix Functions.
* initialize_book:                       EB_Book Functions.
* initialize_booklist:                   BookList Functions.
* initialize_hookset:                    Hookset Access Functions.
* initialize_library:                    Init and Exit Functions.
* is_appendix_bound:                     Appendix Functions.
* is_bound:                              EB_Book Functions.
* is_text_stopped:                       Text Data Functions.
* load_all_appendix_subbooks:            Appendix Functions.
* load_all_subbooks:                     Subbook Functions.
* menu:                                  Text Data Functions.
* multi_entry_count:                     Search Functions.
* multi_entry_have_candidates:           Search Functions.
* multi_entry_label:                     Search Functions.
* multi_search_list:                     Search Functions.
* narrow_alt_character_text:             Appendix Functions.
* narrow_alt_end:                        Appendix Functions.
* narrow_alt_start:                      Appendix Functions.
* narrow_font_bmp_size:                  Font Functions.
* narrow_font_character_bitmap:          Font Functions.
* narrow_font_end:                       Font Functions.
* narrow_font_gif_size:                  Font Functions.
* narrow_font_size:                      Font Functions.
* narrow_font_size2:                     Font Functions.
* narrow_font_start:                     Font Functions.
* narrow_font_width:                     Font Functions.
* narrow_font_width2:                    Font Functions.
* narrow_font_xbm_size:                  Font Functions.
* narrow_font_xpm_size:                  Font Functions.
* path:                                  EB_Book Functions.
* read_binary:                           Binary Data Functions.
* read_heading:                          Text Data Functions.
* read_rawtext:                          Text Data Functions.
* read_text:                             Text Data Functions.
* search_endword:                        Search Functions.
* search_keyword:                        Search Functions.
* search_multi:                          Search Functions.
* search_word:                           Search Functions.
* seek_text:                             Text Data Functions.
* set_appendix_subbook:                  Appendix Functions.
* set_binary_color_graphic:              Binary Data Functions.
* set_binary_mono_graphic:               Binary Data Functions.
* set_binary_mpeg:                       Binary Data Functions.
* set_binary_wave:                       Binary Data Functions.
* set_font:                              Font Functions.
* set_hook:                              Hookset Access Functions.
* set_hooks:                             Hookset Access Functions.
* set_subbook:                           Subbook Functions.
* stop_code:                             Appendix Functions.
* subbook:                               Subbook Functions.
* subbook_directory:                     Subbook Functions.
* subbook_list:                          Subbook Functions.
* subbook_title:                         Subbook Functions.
* subbook_title2:                        Subbook Functions.
* tell_text:                             Text Data Functions.
* text:                                  Text Data Functions.
* unset_appendix_subbook:                Appendix Functions.
* unset_font:                            Font Functions.
* unset_subbook:                         Subbook Functions.
* wide_alt_character_text:               Appendix Functions.
* wide_alt_end:                          Appendix Functions.
* wide_alt_start:                        Appendix Functions.
* wide_font_bmp_size:                    Font Functions.
* wide_font_character_bitmap:            Font Functions.
* wide_font_end:                         Font Functions.
* wide_font_gif_size:                    Font Functions.
* wide_font_size:                        Font Functions.
* wide_font_size2:                       Font Functions.
* wide_font_start:                       Font Functions.
* wide_font_width:                       Font Functions.
* wide_font_width2:                      Font Functions.
* wide_font_xbm_size:                    Font Functions.
* wide_font_xpm_size:                    Font Functions.
* write_text:                            Text Data Functions.
* write_text_byte1:                      Text Data Functions.
* write_text_byte2:                      Text Data Functions.
* write_text_string:                     Text Data Functions.

