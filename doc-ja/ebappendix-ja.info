これは ebappendix-ja.info、 ebappendix-ja.texi より makeinfo バージョン
4.5 によって作成されました。

INFO-DIR-SECTION CD-ROM Book Utilities
START-INFO-DIR-ENTRY
* ebappendix-ja: (ebappendix-ja).  Format appendix files for a CD-ROM book.
END-INFO-DIR-ENTRY

   ebappendix: 付録 (appendix) データ整形ツール、笠原基之

   Copyright (C) 2003  Motoyuki Kasahara

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by Free Software Foundation, Inc.


File: ebappendix-ja.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

   この文書は第 4.0beta3 版です。 EB ライブラリバージョン 4.0beta3 に対
応しています。

* Menu:

* Introduction::                はじめに
* Write Appendix Source::       appendix のソースデータの書き方
* Generate Appendix::           appendix の生成

 --- The Detailed Node Listing ---

はじめに

* What is Appendix::            appendix (付録) とは
* What is ebappendix::          `ebappndix' コマンドとは

appendix のソースデータの書き方

* What is catalog.app::         `catalog(s).app' とは
* Write catalog.app::           `catalog(s).app' の書き方
* What is subbook.app::         `<副本>.app' とは
* subbook.app Syntax::          `<副本>.app' の文法
* Single Directives::           `<副本>.app' の単独指示子
* Group Directives::            `<副本>.app' の複合指示子

appendix の生成

* Invoke ebappendix::           `ebappendix' の実行
* Merge Appendix::              appendix と CD-ROM 書籍の重ね合わせ
* Options to ebappendix::       `ebappendix' のオプション


File: ebappendix-ja.info,  Node: Introduction,  Next: Write Appendix Source,  Prev: Top,  Up: Top

はじめに
********

   `ebappendix' はフリーソフトウェアです。 あなたは、 Free Software
Foundation が公表した GNU General Public License (GNU 一般公有使用許諾)
バージョン 2 あるいはそれ以降の各バージョンの中からいずれかを選択し、
そのバージョンが定める条項に従って本プログラムを再頒布または変更するこ
とができます。

   `ebappendix' は有用とは思いますが、頒布にあたっては、市場性及び特定
目 的適合性についての暗黙の保証を含めて、いかなる保証も行ないません。
詳細については GNU General Public License をお読み下さい。

* Menu:

* What is Appendix::            appendix (付録) とは
* What is ebappendix::          `ebappndix' コマンドとは


File: ebappendix-ja.info,  Node: What is Appendix,  Next: What is ebappendix,  Prev: Introduction,  Up: Introduction

appendix (付録) とは
====================

   "appendix" ("付録") とは CD-ROM 書籍の補助データのことです。
appendix は CD-ROM 書籍の出版社から提供されているものではなく、 EB ライ
ブラリに固有のものです。

   appendix は以下のデータを CD-ROM 書籍に対して提供します。

本文の区切りコード
     あなたが EB ライブラリを使って CD-ROM 辞書の中のある単語を引く際、
     その単語の説明が終了する箇所で、EB ライブラリが本文の出力を止める
     ことをあなたは期待するのではないでしょうか。 しかし、EB ライブラ
     リはそのような動作を保証することができません。 なぜなら、CD-ROM 書
     籍の本文には、項目の終わりを示す印が存在しないからです。

     幸いにも、多くの CD-ROM
     書籍には、項目の終わりを示す印の代替として使える、"区切りコード"
     ("stop code") というものを持っています。 通常、EB ライブラリはこの
     区切りコードを自動的に推測するようになっているのですが、時々誤っ
     た区切りコードを導き出すことがあります。 appendix
     の区切りコードは、その書籍の正しい区切りコードを EB ライブラリに
     教えてやるために用います。

外字の代替文字列
     多くの CD-ROM 書籍は、外字 (独自に定義した文字) を持っており、本文
     中でその外字を使っています。 CD-ROM 書籍では外字のビットマップフ
     ォントを用意しており、 クライアントアプリケーションが外字を出力す
     るには、そのフォントを描画しなくてはなりません。

     appendix では、外字の "代替文字列" ("alternation text") を定義す
     ることができます。 アプリケーションは、ビットマップフォントを描画
     する代わりに、その代替文字列を出力することにしても良いでしょう。

   appendix のレイアウトは CD-ROM 書籍のものとよく似ています。 トップデ
ィレクトリには `catalog' もしくは `catalogs' ファイルが存在し、各副本の
データは対応するサブディレクトリに配置されています。


File: ebappendix-ja.info,  Node: What is ebappendix,  Prev: What is Appendix,  Up: Introduction

`ebappendix' コマンドとは
=========================

   appendix はバイナリ形式のデータファイルで構成されますので、手で直接
編集するのは容易ではありません。 そこで、 EB ライブラリでは `ebappendix'
コマンドを用意しています。 `ebappendix' コマンドは、テキスト形式で書か
れたデータを読み込み、 バイナリ形式の appendix を生成します。

   EB ライブラリの公式な FTP サイト
(<ftp://ftp.sra.co.jp/pub/misc/eb/appendix/>) には、既にいくつかの書籍
用の appendix が置いてあります。 ここに載っていない CD-ROM 書籍用の
appendix を用意したい場合は、 `ebappendix' コマンドを使いましょう。


File: ebappendix-ja.info,  Node: Write Appendix Source,  Next: Generate Appendix,  Prev: Introduction,  Up: Top

appendix のソースデータの書き方
*******************************

   この章では、appendix のソースデータの書き方を説明します。 ここで、「
ソースデータ」と言っているのは、`ebappendix' が読み込むテキスト形式で
書かれたデータのことです。

   appendix を生成するためには、次に挙げるソースデータファイルが必要で
す。
これらのファイルをすべて、同じディレクトリ上に用意するようにします。

`catalog.app' または `catalogs.app'
     appendix には必ず、`catalog' または `catalogs' という名前のファイ
     ルが必要です。 `catalog.app', `catalogs.app' はその生成元となるフ
     ァイルです。 appendix に収録されている "副本 (subbook)" (詳しくは
     *note `catalog(s).app' の書き方: Write catalog.app.)  の一覧を記し
     ます。

`<副本>.app'
     appendix が収録している副本それぞれに対して、一つずつ用意する必要
     が あります (`<副本>' の部分は、実際は個々の副本の名前になります)
     。 appendix のメインデータである、本文の区切りコードや外字の代替文
     字列は、 このファイルに記します。

* Menu:

* What is catalog.app::         `catalog(s).app' とは
* Write catalog.app::           `catalog(s).app' の書き方
* What is subbook.app::         `<副本>.app' とは
* subbook.app Syntax::          `<副本>.app' の文法
* Single Directives::           `<副本>.app' の単独指示子
* Group Directives::            `<副本>.app' の複合指示子


File: ebappendix-ja.info,  Node: What is catalog.app,  Next: Write catalog.app,  Prev: Write Appendix Source,  Up: Write Appendix Source

`catalog(s).app' とは
=====================

   CD-ROM 書籍と同様に、 appendix パッケージにも必ず `catalog' もしくは
`catalogs' という名前のファイルのどちらか一方が必要です。
`catalog.app', `catalogs.app' ファイルは、その生成元となります。

   `ebappendix' コマンドに appendix を生成させる際には、 `catalog.app'
か `catalogs.app' のどちらかを必ず用意しておく必要があります。

   `ebappendix' の標準の動作では、`catalog.app' というファイル名にして
おくと、生成するファイル名も `catalog' になります。 また、appendix 全体
のディレクトリ構造が、電子ブックに似た形式になります。

   反対に、`catalogs.app' というファイル名にしておくと、生成するファイ
ル名も `catalogs' になります。 また、 appendix
全体のディレクトリ構造が、EPWING に似た形式になります。

   ただし、 EPWING の書籍に対して電子ブック形式の appendix
を使用しても、 動作そのものには支障がありません。 逆も同様です。


File: ebappendix-ja.info,  Node: Write catalog.app,  Next: What is subbook.app,  Prev: What is catalog.app,  Up: Write Appendix Source

`catalog(s).app' の書き方
=========================

   `catalog(s).app' には、書籍に収録されている副本のディレクトリ名を 1
行に 1 つずつ書き並べます。 副本のディレクトリ名は、`ebinfo' コマンドを
使うと容易に分かります。

   以下は、`ebinfo' の実行例です。

     % ebinfo /mnt/cdrom
     ディスクの形式: EB/EBG/EBXA/EBXA-C/S-EBXA
     文字コード: JIS X 0208
     副本の数: 2
     副本  1:
       題名: 新英和辞典（第三版）
       ディレクトリ: ejdict
       検索方式: 前方一致後方一致条件メニュー
       フォントの大きさ: 16 24 30 48
       半角フォントの文字: 0xa121 -- 0xa24e
       全角フォントの文字: 0xa321 -- 0xa27e
     副本  2:
       題名: この書籍の使い方
       ディレクトリ: howto
       検索方式: 前方一致後方一致条件メニュー
       フォントの大きさ: 16 24 30 48
       半角フォントの文字:
       全角フォントの文字: 0xa321 -- 0xa27e

この辞書用の appendix を作成する場合、`catalog(s).app' には次のように
記します。

     ejdict
     howto

(`ebinfo' コマンドに関しての詳細は、 *note `ebinfo' の実行 :
(ebinfo-ja)Invoke ebinfo.)。

   ディレクトリ名の大文字、小文字は、同じものとして扱われます。 また、
空行およびおよび空白以外の最初の文字がハッシュ記号 (`#') である行は無視
されます。

   必ずもとの書籍の副本すべてを、同じ順序で `catalog(s).app' に記すよ
うにして下さい。


File: ebappendix-ja.info,  Node: What is subbook.app,  Next: subbook.app Syntax,  Prev: Write catalog.app,  Up: Write Appendix Source

`<副本>.app' とは
=================

   appendix が収録している副本それぞれに対して、ソースデータファイル `<
副本>.app' を用意する必要があります。 `<副本>' の部分は、実際には個々の
副本の使用するディレクトリ名になります。

   たとえば、前節の例では、書籍が `ejdict' と `howto' というディレクト
リ名を持った副本を持っていました。 この場合、用意するファイルは
`ejdict.app' と `howto.app' になります。

   `<副本>.app' ファイルは appendix のメインデータである、本文の区切り
コードや外字の代替文字列を収録した `appendix' や `furoku' といったファ
イルの生成元になります。 (appendix を電子ブック形式で生成すると
`appendix'、EPWING 形式で生成すると `furoku' というファイル名になりま
す。)


File: ebappendix-ja.info,  Node: subbook.app Syntax,  Next: Single Directives,  Prev: What is subbook.app,  Up: Write Appendix Source

`<副本>.app' の文法
===================

   各副本のソースデータを記したファイル「`<副本 >.app'」の中では、
空行、および空白以外の最初の文字がハッシュ記号 (`#') である行は無視さ
れます。

   他の行はすべて、"単独指示子 (single directive)" か "複合指示子
(group directive)" のいずれかでなくてはなりません。 単独指示子と複合指
示子は、どのような順序で定義しても差し支えありません。

   単独指示子とは、1 行で完結する指示子です。 単独指示子の一般形は次の
通りです。

     指示子の名前    指示子の値

以下の例では、`stop-code' が指示子の名前、 `0x1f09 0x0001'
がその値です。

     stop-code          0x1f09 0x0001

指示子名の大文字と小文字は区別されますので、`stop-code' を `Stop-Code'
と書くことはできません。 指示子の名前と値の区切りには、空白かタブを用い
ます。 連続した空白とタブが、行頭および行末にあった場合、それらは無視さ
れます。

   複合指示子とは、記述が設定ファイル内の複数行に渡る指示子です。 複合
指示子の一般形は次の通りです。

     begin 複合指示子の名前
         副指示子の名前    副指示子の値
                  :
                  : (繰り返し)
                  :
     end

キーワード `begin' が、複合指示子の開始を表します。 `begin' は後ろに複
合指示子の名前を引数として取ります。 `begin' と複合指示子の名前は空
白かタブで区切り、両方とも同じ行の中に置きます。 キーワード `end' は、
複合指示子の終了を表します。 `end' は、単独で 1 行にして置きます。

   今のところ `<副本 >.app' で使用できる複合指示子の名前は、 `narrow' と
`wide' の 2 つだけです。 それぞれの "副指示子" は、`begin' と `end' の
行の間に置きます。 副指示子に関する記述の一般的な規則は、単独指示子と
変わりません (たとえば、副指示子の名前と副指示子の値は空白かタブで区
切ることなど)。

   以下は、 `narrow' 複合指示子の記述例です。

     begin narrow
         range-start     0xa121
         range-end       0xa123
         0xa121          [→参照]
         0xa122          [→音声]
         0xa123          [→図解]
     end


File: ebappendix-ja.info,  Node: Single Directives,  Next: Group Directives,  Prev: subbook.app Syntax,  Up: Write Appendix Source

`<副本>.app' の単独指示子
=========================

   単独指示子には次のようなものがあります。

`character-code'
     appendix の文字コードを指定します。 文字コードは必ず、CD-ROM 書籍
     に合わせるようにします。 CD-ROM 書籍の文字コードは、`ebinfo' コマ
     ンドの出力を見れば確認できます。

     CD-ROM 書籍が ISO 8859-1 で書かれている場合は、指示子の値として
     `ISO8859-1' を指定します。 それ以外の場合は、`JISX0208' を指定して
     下さい。

          character-code          JISX0208

     この指示子は、`<副本>.app' ファイル内で必ず一回定義されなければな
     りません。 定義しなかったり、二度以上定義するとエラーになります。

`stop-code'
     副本の本文の区切りコードを指定します。 指示子の値は、区切りコード
     の文字番号を 2 つ書き並べたものになります。

          stop-code          0x1f09 0x0001

     文字番号は、`0x' ないし `0X' に続けて 16進数 4 桁で記します。 ただ
     し、1つ目の文字番号は、 `0x1f09' か `0x1f41'
     でなければなりません。 それ以外だとエラーになります。

     `ebstopcode' コマンドを使うと、副本に適切な区切りコードを特定する
     ことができます (詳しくは *note `ebstopcode' の実行 :
     (ebstopcode-ja)Invoke ebstopcode.)。

     この指示子は定義しなくても構いませんが、二度以上定義するとエラーに
     なります。


File: ebappendix-ja.info,  Node: Group Directives,  Prev: Single Directives,  Up: Write Appendix Source

`<副本>.app' の複合指示子
=========================

   `narrow' および `wide' 複合指示子は、それぞれ副本に対する半角外字お
よび全角外字に対する代替文字列を定義するために用います。 ただし、副本が
外字を定義していても、代替文字列を利用する必要がなければ、 `narrow',
`wide' 複合指示子を記述する必要はありません。

   `narrow' と `wide' 複合指示子内で定義できる副指示子は、 まったく同じ
です。 副指示子には次のようなものがあります。

`range-start'
`range-end'
     外字の定義範囲を記します。 開始位置の文字番号を `range-start' で、
     終了位置の文字番号を `range-end' で指定します。 文字番号は、`0x'
     ないし `0X' に続けて 16進数 4 桁で記します。 以下は記述例です。

              range-start     0xa121
              range-end       0xa123

     定義範囲は、 `ebinfo' コマンドの出力結果の「半角フォントの文字
     (narrow font characters)」 「全角フォントの文字 (wide font
     characters)」 で記された範囲と一致させるようにして下さい。

     `narrow' および `wide' 複合指示子内では、 必ず一回ずつ
     `range-start' および `range-end' を定義しなければなりません。 定
     義しなかったり、二度以上定義したりするとエラーになります。

`0xHHHH'
     HHHH は、4 桁の 16進数です。 文字番号 `0xHHHH' の全角外字ないし半
     角外字に対して、 代替文字列を定義します。

              0xa121          [名]

     appendix が ISO 8859-1 で書かれている場合は、代替文字列も ISO
     8859-1 で定義します。 それ以外の場合は、代替文字列を日本語 EUC で
     定義します。 いずれも、代替文字列は最長で 31 バイトまでで、それを
     超えるとエラーになります。

     `range-start', `range-end' で指定した定義範囲内の外字すべてについ
     て、代替文字列を設定する必要はありません。 ただし、同一の複合指示
     子内で、一つの文字番号の外字に対して代替文字列を定義できるのは一
     回までです。 複数回設定しようとすると、エラーになります。 また、範
     囲外の文字番号の代替文字列を定義しようとしても、やはりエラーにな
     ります。

     CD-ROM 書籍がどのような外字を定義しているのかは、 `ebfont'
     コマンドで調べることができます (詳しくは *note `ebfont' の実行 :
     (ebfont-ja)Invoke ebfont.)。


File: ebappendix-ja.info,  Node: Generate Appendix,  Prev: Write Appendix Source,  Up: Top

appendix の生成
***************

   appendix のソースデータが書けたら、`ebappendix' コマンドを用いて実
際の (バイナリ形式の) appendix を生成します。

   以下、この章では `ebappendix' の実行方法について詳しく説明します。

* Menu:

* Invoke ebappendix::           `ebappendix' の実行
* Merge Appendix::              appendix と CD-ROM 書籍の重ね合わせ
* Options to ebappendix::       `ebappendix' のオプション


File: ebappendix-ja.info,  Node: Invoke ebappendix,  Next: Merge Appendix,  Prev: Generate Appendix,  Up: Generate Appendix

`ebappendix' の実行
===================

   `ebappendix' の一般的な起動方法は次の通りです。

     % ebappendix 入力ディレクトリのパス

入力ディレクトリのパスには、読み込む appendix ソースデータのディレク
トリ、つまり `catalog.app' または `catalogs.app' ファイルが存在するディ
レクトリを指定します。 省略した場合は、カレントディレクトリを指定したと
みなされます。

   標準では、出力ファイルはカレントディレクトリに作成されます。

   `--output-directory' オプションを指定することで、`ebappendix' はカレ
ントディレクトリ以外の場所に出力することができます。

     % ebappendix --output-directory 出力ディレクトリのパス \
       入力ディレクトリのパス

もし出力ディレクトリが存在していなければ、自動的に `ebappendix' が生成
します。

   実行すると、`ebappendix' は出力ディレクトリの下にサブディレクトリを
作り、いくつかのファイルを生成します。


File: ebappendix-ja.info,  Node: Merge Appendix,  Next: Options to ebappendix,  Prev: Invoke ebappendix,  Up: Generate Appendix

appendix と CD-ROM 書籍の重ね合わせ
===================================

   HDD 上にコピーした CD-ROM 書籍と同じディレクトリに、appendix を重ね
て 置くことができます。

   これには、`ebappendix' の `--output-directory' と `--no-catalog' オ
プションを使います。 `--output-directory' オプションには、CD-ROM 書籍の
トップディレクトリを指定します。

     % ebappendix --no-catalog --output-directory 出力ディレクトリのパス \
       入力ディレクトリのパス

   なお、appendix の形式 (電子ブックか EPWING か) は CD-ROM 書籍に合わ
せるようにします (詳しくは *note `catalog(s).app' の書き方 : Write
catalog.app.)。

   `ebappendix' の実行前後で CD-ROM 書籍のディレクトリ構成がどのように
変化するのか、例を記してみます。 まず電子ブックの場合ですが、実行前のデ
ィレクトリ構成が次のようになっていたとします。

     catalog
     ejdict/start
     howto/start

`ebappendix' で appendix を重ね合わせると、次のような構成になります。

     catalog
     ejdict/start
     ejdict/appendix  ← appendix のファイル
     howto/start
     howto/appendix   ← appendix のファイル

   同様に、EPWING で実行前のディレクトリ構成が次のようになっていたとす
ると、

     catalogs
     ejdict/data/honmon
     howto/data/honmon

実行後は、次のような構成になります。

     catalogs
     ejdict/data/honmon
     ejdict/data/furoku  ← appendix のファイル
     howto/data/honmon
     howto/data/furoku   ← appendix のファイル

   CD-ROM 書籍によっては、ディレクトリ名に大文字が混じっていることがあ
りますが、`ebappendix' はそれを検出しますので、名前を小文字に変えたデ
ィレクトリを別途作ってしまうことはありません。

   `--no-catalog' オプションを指定すると、`ebappendix' はカタログファ
イル `catalog' や `catalogs' ファイルを生成しなくなります。 この
appendix を EB ライブラリのアプリケーションから使う際は、 CD-ROM 書籍に
最初から用意されている `catalog' や `catalogs' ファイルを CD-ROM 書籍、
appendix 共用のカタログファイルとして流用することになります。

   appendix のカタログファイルは、CD-ROM 書籍のカタログファイルの部分集
合 となっているため、こうした事が可能となっています。 `--no-catalog' オ
プションを指定し忘れると、`ebappendix' は CD-ROM 書籍のカタログファイル
を上書きしてしまいますので、注意して下さい。


File: ebappendix-ja.info,  Node: Options to ebappendix,  Prev: Merge Appendix,  Up: Generate Appendix

`ebappendix' のオプション
=========================

   `ebappendix' コマンドは、伝統的な一文字オプション名と覚えやすい長い
オプション名の両方を扱うことができます。 長いオプション名を表すには、
`-' ではなく `--' を用います。 オプション名が一意に決まる範囲内で、名前
の後方部分を省略することができます。

`-b 書籍の形式'
`--book-type'
     appendix を電子ブック、EPWING のどちらの形式のレイアウトに似せて作
     る のかを指定します。 電子ブック形式なら `eb'、 EPWING 形式なら
     `epwing' と指定します。

     このオプションを指定しなかった場合、次の要領でどちらの形式で生成す
     る のかがが決定されます。 まず、入力ディレクトリに `catalog.app'
     ファイルが存在すればそれが読み込まれ、電子ブック形式の appendix
     が生成されます。 `catalog.app' がなく、代わりに `catalogs.app' が
     存在すればそれが読み込まれ、 EPWING 形式の appendix
     が生成されます。 (`catalogs.app' も `catalog.app' なければ、エラー
     になります。)

`-d'
`--debug'
     デバッグ用のメッセージを、標準エラー出力に出力します。

`-h'
`--help'
     ヘルプメッセージを標準出力に出力して、終了します。

`-n'
`--no-catalog'
     カタログファイル (`catalog' および `catalogs') を生成しません。 こ
     のオプションは、書籍と appendix を同じディレクトリに重ね合わせる際
     に 有効です (詳しくは *note appendix と CD-ROM 書籍の重ね合わせ :
     Merge Appendix.)。

`-o ディレクトリ'
`--output-directory ディレクトリ'
     出力先のディレクトリを指定します。 このオプションを省略すると、カ
     レントディレクトリ (`.') に出力します。 ディレクトリが存在しなけれ
     ば、自動的に生成されます。

`-t'
`--test'
     ファイルを出力しません。 入力ファイルを読み込んで、内容のチェック
     だけを行います。

`-v'
`--version'
     バージョン番号を標準出力に出力して、終了します。



Tag Table:
Node: Top1034
Node: Introduction2089
Node: What is Appendix2827
Node: What is ebappendix4675
Node: Write Appendix Source5349
Node: What is catalog.app6786
Node: Write catalog.app7801
Node: What is subbook.app9227
Node: subbook.app Syntax10047
Node: Single Directives12091
Node: Group Directives13484
Node: Generate Appendix15671
Node: Invoke ebappendix16174
Node: Merge Appendix17141
Node: Options to ebappendix19459

End Tag Table
