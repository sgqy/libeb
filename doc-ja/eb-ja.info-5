これは ./eb-ja.info、./eb-ja.texi より makeinfo バージョン 4.5
によって作成されました。

INFO-DIR-SECTION CD-ROM Book Utilities
START-INFO-DIR-ENTRY
* eb-ja: (eb-ja).               C library for accessing CD-ROM book.
END-INFO-DIR-ENTRY

   EB Library: CD-ROM 書籍にアクセスするための C ライブラリ, 笠原基之

   Copyright (C) 1998, 99  Motoyuki Kasahara

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by Free Software Foundation, Inc.


File: eb-ja.info,  Node: Get Font,  Next: Convert Font,  Prev: Current Font Height,  Up: Local Character

外字フォントの取り出し
======================

   外字の高さを選択した状態であれば、外字のフォントデータ (ビットマップ
データ) を取り出すことができます。

   フォントデータを取り出す関数は、 全角外字なら
`eb_wide_font_character_bitmap()'、 半角外字なら
`eb_narrow_font_character_bitmap()' です。

   全角外字 `0xa121' のフォントデータを取り出すプログラムは、次のよう
になります。 半角外字の場合は、呼び出す関数名が変わるだけです。

     /* `book' が `EB_Book' のオブジェクトで、すでに書籍に結び付け
      * られ、副本と外字の高さを選択中だと仮定しています。*/
     char bitmap[EB_SIZE_WIDE_FONT_48];
     
     if (eb_wide_font_character_bitmap(book, 0xa121, bitmap)
         != EB_SUCCESS) {
         return;
     }

ここでは、`bitmap' にフォントデータを格納しています。 `bitmap' の領域と
して `EB_SIZE_WIDE_FONT_48' バイトを確保していますが、これは高さ 48 ピ
クセルの外字データを格納するために必要なサイズを表します。

   フォントデータのサイズは、外字の高さに応じて一定です。 高さ 48 ピク
セルは外字の中でも最大のサイズなので、このサイズの領域を用意すれば、ど
の高さの外字でも格納できます。

   外字データは、ビットマップ形式のデータになっています。 背景色をビッ
ト値 0, 前景色をビット値 1 として、各ピクセルの値を並べてあります。 並
び方ですが、左上からまずは右に向かってピクセルを拾っていき、左端まで来
たら一つ下の段に降りて、また右方向にピクセルを拾います。 以下、一番下の
段までこれを繰り返します。

   ただし、バイト内では、 128, 64, 32, ...1
の桁の順にビット値を格納しています。 つまり、 128
の桁は一番左のピクセル、1 の桁は一番右のピクセルに対応します。

   以下に、 16x16
の全角外字のビットマップの例と、そのバイト列を記します。 背景色が□、前
景色が■です。

     □□□□□□□□□□□□□□□□　　0x00, 0x00,
     □□□□□□□□□□□□□□□□　　0x00, 0x00,
     □□□■■■■■■□□□■□□□　　0x1f, 0x88,
     □□□□□□□□■□■□■□□□　　0x00, 0xc8,
     □□□□■□□■□□■□■□□□　　0x09, 0x28,
     □□□□■□□■■■■■■□□□　　0x09, 0xf8,
     □□■■■■■□□□■□■□□□　　0x3e, 0x28,
     □□□□□□□□□□■□■□□□　　0x00, 0x28,
     □□□■□□□□□□□□■□□□　　0x10, 0x08,
     □□□■□□□□□□□□■□□□　　0x10, 0x08,
     □□□■■■■■■■■■■□□□　　0x1f, 0xf8,
     □□□■□□□□□□□□■□□□　　0x18, 0x08,
     □□□■□□□□□□□□■□□□　　0x18, 0x08,
     □□□■■■■■■■■■■□□□　　0x1f, 0xf8,
     □□□□□□□□□□□□□□□□　　0x00, 0x00,
     □□□□□□□□□□□□□□□□　　0x00, 0x00,


File: eb-ja.info,  Node: Convert Font,  Next: Local Character in Text,  Prev: Get Font,  Up: Local Character

外字フォントの変換
==================

   EB ライブラリには、外字のビットマップデータを XBM, XPM, GIF, BMP の
各画像形式に変換する関数が用意されています。 変換を行う関数は、次の 4
つです。

eb_bitmap_to_xbm()                          XBM への変換
eb_bitmap_to_xpm()                          XPM への変換
eb_bitmap_to_gif()                          GIF への変換
eb_bitmap_to_bmp()                          BMP への変換

どの関数も呼び出し方は同じですが、ここでは XBM への変換のプログラム例
を示します。

     /* `bitmap' に高さ 16 の全角外字のビットマップデータが格納
      * されていると仮定しています。*/
     char bitmap[EB_SIZE_WIDE_FONT_16];
     char xbm[EB_SIZE_WIDE_FONT_16_XBM];
     size_t xbmsize;
     
     if (eb_wide_font_character_bitmap(bitmap, EB_WIDTH_WIDE_FONT_16,
         EB_HEIGHT_FONT_16, xbm, &xbmsize) != EB_SUCCESS) {
         return;
     }

   XPM, GIF への変換では、前景色は黒、背景色は透明になります。 BMP への
変換では、前景色は黒、背景色は白になります。 XBM はモノクロ図版用のデー
タ形式なので、色の設定はありません。


File: eb-ja.info,  Node: Local Character in Text,  Next: Font Data Types,  Prev: Convert Font,  Up: Local Character

テキスト中の外字
================

   外字はテキストデータ (本文、メニューなど) の中で使われています。

   アプリケーションプログラムが、テキストデータ中に出現する外字を識別し
て 処理を行うには、外字に対するフックを設定して、フック関数の中で処理す
る ことになります。

   外字に対するフックは、全角外字に対する `EB_HOOK_WIDE_FONT' と半角外
字に対する `EB_HOOK_NARROW_FONT' の二種類があります。 いずれも、外字が
一字出現する度に、設定したフック関数を呼び出します。

   フックの扱い方については、*note フックコードの一覧: Hook Code List.。


File: eb-ja.info,  Node: Font Data Types,  Next: Font Constants,  Prev: Local Character in Text,  Up: Local Character

データ型の詳細
==============

   この節で説明しているデータ型を使うには、次のようにヘッダファイルを
読み込んで下さい。

     #include <eb/eb.h>

 - Data type: EB_Font_Code
     外字コードは、外字の高さ (ピクセル数) を表します。 現在のところ、
     定義されている高さは次の通りです。

        * `EB_FONT_16'

        * `EB_FONT_24'

        * `EB_FONT_30'

        * `EB_FONT_48'

        * `EB_FONT_INVALID'

     外字コードの実体は整数値ですが、`EB_FONT_16' の値は 16 ではありま
     せん。 他も同様ですので、注意して下さい。

     `EB_FONT_INVALID' は特別な外字コードで、不正な外字コード値を表す
     ために用います。


File: eb-ja.info,  Node: Font Constants,  Next: Font Functions,  Prev: Font Data Types,  Up: Local Character

定数の詳細
==========

   この節で説明している定数を使うには、次のようにヘッダファイルを読み
込んで下さい。

     #include <eb/eb.h>

 - Constant: EB_WIDTH_NARROW_FONT_16
 - Constant: EB_WIDTH_NARROW_FONT_24
 - Constant: EB_WIDTH_NARROW_FONT_30
 - Constant: EB_WIDTH_NARROW_FONT_48
 - Constant: EB_WIDTH_WIDE_FONT_16
 - Constant: EB_WIDTH_WIDE_FONT_24
 - Constant: EB_WIDTH_WIDE_FONT_30
 - Constant: EB_WIDTH_WIDE_FONT_48
     これらの定数は、半角、全角およびそれぞれの高さ (外字コード) の外字
     一個分の幅 (横方向のピクセル数) を `int' 型で表しています。

 - Constant: EB_HEIGHT_NARROW_FONT_16
 - Constant: EB_HEIGHT_NARROW_FONT_24
 - Constant: EB_HEIGHT_NARROW_FONT_30
 - Constant: EB_HEIGHT_NARROW_FONT_48
 - Constant: EB_HEIGHT_WIDE_FONT_16
 - Constant: EB_HEIGHT_WIDE_FONT_24
 - Constant: EB_HEIGHT_WIDE_FONT_30
 - Constant: EB_HEIGHT_WIDE_FONT_48
     これらの定数は、半角、全角およびそれぞれの高さ (外字コード) の外字
     一個分の縦方向のピクセル数を `int' 型で表しています。

     `EB_HEIGHT_NARROW_FONT_16' および `EB_HEIGHT_WIDE_FONT_16' の実際
     の値は 16 です。 (外字コード `EB_FONT_16' の実際の値は 16 ではあり
     ませんので、注意して下さい。)

 - Constant: EB_SIZE_NARROW_FONT_16
 - Constant: EB_SIZE_NARROW_FONT_24
 - Constant: EB_SIZE_NARROW_FONT_30
 - Constant: EB_SIZE_NARROW_FONT_48
 - Constant: EB_SIZE_WIDE_FONT_16
 - Constant: EB_SIZE_WIDE_FONT_24
 - Constant: EB_SIZE_WIDE_FONT_30
 - Constant: EB_SIZE_WIDE_FONT_48
     これらの定数は、半角、全角およびそれぞれの高さ (外字コード) の外字
     一個分のビットマップデータを格納するのに必要な領域の大きさを表し
     ています。 値は `int' 型で、単位はバイトです。

 - Constant: EB_SIZE_NARROW_FONT_16_XBM
 - Constant: EB_SIZE_NARROW_FONT_24_XBM
 - Constant: EB_SIZE_NARROW_FONT_30_XBM
 - Constant: EB_SIZE_NARROW_FONT_48_XBM
 - Constant: EB_SIZE_WIDE_FONT_16_XBM
 - Constant: EB_SIZE_WIDE_FONT_24_XBM
 - Constant: EB_SIZE_WIDE_FONT_30_XBM
 - Constant: EB_SIZE_WIDE_FONT_48_XBM
     これらの定数は、半角、全角およびそれぞれの高さ (外字コード) の外字
     一個分のビットマップデータを `eb_bitmap_to_xbm()' を用いて XBM 形
     式に変換する際に、変換後の XBM
     形式のデータの大きさを表しています。 値は `int' 型で、単位はバイト
     です。

 - Constant: EB_SIZE_NARROW_FONT_16_XPM
 - Constant: EB_SIZE_NARROW_FONT_24_XPM
 - Constant: EB_SIZE_NARROW_FONT_30_XPM
 - Constant: EB_SIZE_NARROW_FONT_48_XPM
 - Constant: EB_SIZE_WIDE_FONT_16_XPM
 - Constant: EB_SIZE_WIDE_FONT_24_XPM
 - Constant: EB_SIZE_WIDE_FONT_30_XPM
 - Constant: EB_SIZE_WIDE_FONT_48_XPM
     これらの定数は、半角、全角およびそれぞれの高さ (外字コード) の外字
     一個分のビットマップデータを `eb_bitmap_to_xpm()' を用いて XPM 形
     式に変換する際に、変換後の XPM
     形式のデータの大きさを表しています。 値は `int' 型で、単位はバイト
     です。

 - Constant: EB_SIZE_NARROW_FONT_16_GIF
 - Constant: EB_SIZE_NARROW_FONT_24_GIF
 - Constant: EB_SIZE_NARROW_FONT_30_GIF
 - Constant: EB_SIZE_NARROW_FONT_48_GIF
 - Constant: EB_SIZE_WIDE_FONT_16_GIF
 - Constant: EB_SIZE_WIDE_FONT_24_GIF
 - Constant: EB_SIZE_WIDE_FONT_30_GIF
 - Constant: EB_SIZE_WIDE_FONT_48_GIF
     これらの定数は、半角、全角およびそれぞれの高さ (外字コード) の外字
     一個分のビットマップデータを `eb_bitmap_to_gif()' を用いて GIF 形
     式に変換する際に、変換後の GIF
     形式のデータの大きさを表しています。 値は `int' 型で、単位はバイト
     です。

 - Constant: EB_SIZE_NARROW_FONT_16_BMP
 - Constant: EB_SIZE_NARROW_FONT_24_BMP
 - Constant: EB_SIZE_NARROW_FONT_30_BMP
 - Constant: EB_SIZE_NARROW_FONT_48_BMP
 - Constant: EB_SIZE_WIDE_FONT_16_BMP
 - Constant: EB_SIZE_WIDE_FONT_24_BMP
 - Constant: EB_SIZE_WIDE_FONT_30_BMP
 - Constant: EB_SIZE_WIDE_FONT_48_BMP
     これらの定数は、半角、全角およびそれぞれの高さ (外字コード) の外字
     一個分のビットマップデータを `eb_bitmap_to_bmp()' を用いて BMP 形
     式に変換する際に、変換後の BMP
     形式のデータの大きさを表しています。 値は `int' 型で、単位はバイト
     です。


File: eb-ja.info,  Node: Font Functions,  Next: Font Sample,  Prev: Font Constants,  Up: Local Character

関数の詳細
==========

   この節で説明している関数を使うには、次のようにヘッダファイルを読み込
んで下さい。

     #include <eb/font.h>

 - 機能: EB_Error_Code eb_font (EB_Book *BOOK, EB_Font_Code *FONT_CODE)
     関数 `eb_font()' は、選択している副本において、選択中の外字フォン
     ト の高さを表す外字コードを FONT_CODE の指す領域に書き込みます。

     成功すると関数は `EB_SUCCESS' を返します。 失敗すると FONT_CODE の
     指す領域に `EB_FONT_INVALID' を書き込み、原因を示すエラーコードを
     返します。

     あらかじめ、外字フォントの高さが選択されていなければなりません。
     外字が選択されていなければ、`EB_ERR_NO_CUR_FONT' を返します。 副本
     そのものを選択していない場合も、同様です。

 - 機能 : EB_Error_Code eb_set_font (EB_Book *BOOK, EB_Font_Code
          FONT_CODE)
     関数 `eb_set_font()' は、選択中の副本における外字フォントの高さを
     セットします。 セットする外字フォントの「高さ」は、対応する外字コ
     ードを引数 FONT_CODE で指定します。

     この関数は、成功すると `EB_SUCCESS' を返し、指定した「高さ」が「
     選択中の外字フォントの高さ」となります。 すでに外字フォントの高さ
     を選択していた場合は、いったん未選択の状態にしてからあらためて
     FONT_CODE を選択します。

     失敗すると原因を示すエラーコードを返し、外字フォントの高さは未選択
     の 状態になります。

     あらかじめ、BOOK 内のいずれかの副本が選択されていなくてはなりませ
     ん。 BOOK が副本を選択していなければ、`EB_ERR_NO_CUR_SUB' を返し
     ます。 また、その副本が持っていない外字フォントの高さが指定される
     と、 `EB_ERR_NO_SUCH_FONT' を返します。

 - 機能: void eb_unset_font (EB_Book *BOOK)
     関数 `eb_unset_font()' は、選択中の外字フォントの高さを未選択の状
     態に戻します。 BOOK が書籍に結び付いていない場合や副本が選択されて
     いない場合、 もしくは外字フォントの高さが選択されていない場合は何
     もしません。

 - 機能 : EB_Error_Code eb_font_list (EB_Book *BOOK, EB_Font_Code
          *FONT_LIST, int *FONT_COUNT)
     関数 `eb_font_list()' は、選択中の副本が定義している外字の高さの
     一覧を `EB_Font_Code' 型の配列にして、FONT_LIST の指す領域に書き
     込みます。

     配列は、最大で `EB_MAX_FONTS' 個の要素を持ちます。 加えて、書籍が
     収録している副本の個数を FONT_COUNT の指す領域に書き込みます。 (
     現在のバージョンでは、`EB_MAX_FONTS' の値は 4 になっています。 高
     さ 16, 24, 30, 48 ピクセルの 4 種類です。)

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、
     FONT_COUNT の指す領域に 0 を書き込み、原因を示すエラーコードを返
     します。

     あらかじめ、BOOK 内のいずれかの副本が選択されていなくてはなりませ
     ん。 BOOK が副本を選択していなければ、`EB_ERR_NO_CUR_SUB' を返し
     ます。

 - 機能: int eb_have_font (EB_Book *BOOK, EB_Font_Code FONT_CODE)
     関数 `eb_font()' は、FONT_CODE で指定した高さの外字フォントを、選
     択中の副本が持っているかどうかを調べます。

     持っていれば 1 を返し、持っていなければ 0 を返します。 BOOK が副本
     を選択していない場合も 0 を返します。

 - 機能: EB_Error_Code eb_font_height (EB_Book *BOOK, int *HEIGHT)
     関数 `eb_font_height()' は、BOOK が選択中の外字フォントの高さ (縦
     方向のピクセル数) を HEIGHT の指す領域に書き込みます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、HEIGHT の
     指す領域に 0 を書き込み、原因を示すエラーコードを返します。

     あらかじめ、BOOK は外字フォントの高さを選択していなくてはなりませ
     ん。 選択していない場合は、`EB_ERR_NO_CUR_FONT' を返します。

 - 機能 : EB_Error_Code eb_font_height2 (EB_Font_Code FONT_CODE, int
          *HEIGHT)
     `eb_font_height()' と似ていますが、選択中の副本ではなく、引数
     FONT_HEIGHT で指定された外字コードの高さ (縦方向のピクセル数) を
     書き込む点が異なります。

 - 機能: int eb_have_narrow_font (EB_Book *BOOK)
 - 機能: int eb_have_wide_font (EB_Book *BOOK)
     関数 `eb_have_narrow_font()' は、選択中の副本が半角外字を定義して
     いるかどうかを調べます。 同様に、関数 `eb_have_wide_font()' は、全
     角外字を定義しているかどうかを調べます。

     定義していれば 1 を、定義していなければ 0 を返します。 BOOK が副本
     を選択していない場合も 0 を返します。

 - 機能: EB_Error_Code eb_narrow_font_width (EB_Book *BOOK, int *WIDTH)
 - 機能: EB_Error_Code eb_wide_font_width (EB_Book *BOOK, int *WIDTH)
     関数 `eb_narrow_font_width()' は、BOOK が選択中の外字フォントの高
     さにおける半角外字の幅 (横方向のピクセル数) を、HEIGHT の指す領域
     に書き込みます。 同様に、`eb_wide_font_width()' は全角外字の幅を書
     き込みます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、WIDTH の
     指す領域に 0 を書き込み、原因を示すエラーコードを返します。

     あらかじめ、BOOK は外字の高さを選択していなくてはなりません。 選択
     していない場合は、`EB_ERR_NO_CUR_FONT' を返します。

 - 機能 : EB_Error_Code eb_narrow_font_width2 (EB_Font_Code FONT_CODE,
          int *WIDTH)
 - 機能 : EB_Error_Code eb_wide_font_width2 (EB_Font_Code FONT_CODE, int
          *WIDTH)
     `eb_narrow_font_width()', `eb_wide_font_width()' と似ていますが、
     選択中の副本ではなく、引数 FONT_HEIGHT で指定された外字コードの幅
     (横方向のピクセル数) を書き込む点が異なります。

 - 機能: EB_Error_Code eb_narrow_font_size (EB_Book *BOOK, size_t *SIZE)
 - 機能: EB_Error_Code eb_wide_font_size (EB_Book *BOOK, size_t *SIZE)
     関数 `eb_narrow_font_size()' は、BOOK が選択中の外字フォントの高
     さにおける半角外字一個分のデータサイズ (バイト数) を、SIZE の指す
     領域に書き込みます。 同様に、`eb_wide_font_size()' は全角外字のサ
     イズを書き込みます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、SIZE の指
     す領域に 0 を書き込み、原因を示すエラーコードを返します。

     あらかじめ、BOOK は外字フォントの高さを選択していなくてはなりませ
     ん。 選択していない場合は、`EB_ERR_NO_CUR_FONT' を返します。

 - 機能 : EB_Error_Code eb_narrow_font_size2 (EB_Font_Code FONT_CODE,
          size_t *SIZE)
 - 機能 : EB_Error_Code eb_wide_font_size2 (EB_Font_Code FONT_CODE,
          size_t *SIZE)
     `eb_narrow_font_size()', `eb_wide_font_size()' と似ていますが、 選
     択中の副本ではなく、引数 FONT_HEIGHT で指定された外字コードの外字
     一個分のデータサイズを書き込む点が異なります。

 - 機能: EB_Error_Code eb_narrow_font_start (EB_Book *BOOK, int *START)
 - 機能: EB_Error_Code eb_wide_font_start (EB_Book *BOOK, int *START)
     関数 `eb_narrow_font_start()' は、BOOK が選択中の副本における半角
     外字の先頭の文字番号 (半角外字の文字番号の中で最小のもの) を、
     START の指す領域に書き込みます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、原因を示
     すエラーコードを返します。

     あらかじめ、BOOK は副本を選択していなくてはなりません。 選択してい
     ない場合は、`EB_ERR_NO_CUR_SUB' を返します。 副本が半角外字を定義
     していない場合は、`EB_ERR_NO_CUR_FONT' を返します。

     関数 `eb_wide_font_start()' は、半角外字ではなく全角外字について
     調べるという点を除いて、`eb_narrow_font_start()' と同じです。

 - 機能: EB_Error_Code eb_narrow_font_end (EB_Book *BOOK, int *END)
 - 機能: EB_Error_Code eb_wide_font_end (EB_Book *BOOK, int *END)
     関数 `eb_narrow_font_end()' は、BOOK が選択中の副本における半角外
     字の最後の文字番号 (半角外字の文字番号の中で最大のもの) を、 START
     の指す領域に書き込みます。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、原因を示
     すエラーコードを返します。

     あらかじめ、BOOK は副本を選択していなくてはなりません。 選択してい
     ない場合は、`EB_ERR_NO_CUR_SUB' を返します。 副本が半角外字を定義
     していない場合は、`EB_ERR_NO_CUR_FONT' を返します。

     関数 `eb_wide_font_end()' は、半角外字ではなく全角外字について調
     べるという点を除いて、`eb_narrow_font_end()' と同じです。

 - 機能 : EB_Error_Code eb_narrow_font_character_bitmap (EB_Book *BOOK,
          int CHARACTER_NUMBER, char *BITMAP)
 - 機能 : EB_Error_Code eb_wide_font_character_bitmap (EB_Book *BOOK,
          int CHARACTER_NUMBER, char *BITMAP)
     関数 `eb_narrow_font_character_bitmap()' は、BOOK が選択中の副本
     で定義している、半角外字のビットマップデータを取り出します。 取り
     出す外字の文字番号を、CHARACTER_NUMBER で指定します。

     成功すると、関数はビットマップデータを BITMAP
     の指す領域に書き込み、 `EB_SUCCESS' を返します。 失敗すると、
     BITMAP の指す領域に空文字列を書き込み、原因を示すエラーコードを返
     します。

     あらかじめ、BOOK は外字フォントの高さを選択していなくてはなりませ
     ん。 選択していない場合は、`EB_ERR_NO_CUR_FONT' を返します。 副本
     が半角外字を定義していない場合も、やはり `EB_ERR_NO_CUR_FONT' を返
     します。 文字番号 CHARACTER_NUMBER
     が外字の定義範囲外にある場合は、 `EB_ERR_NO_SUCH_CHAR_BMP' を返し
     ます。

     関数 `eb_wide_font_character_bitmap()' は、半角外字ではなく全角外
     字のビットマップデータを取り出すという点を除いて、
     `eb_narrow_font_character_bitmap()' と同じです。

     ビットマップデータの形式については、 *note 外字フォントの取り出し :
     Get Font.。

 - 機能 : EB_Error_Code eb_forward_narrow_font_character (EB_Book *BOOK,
          int N, int *CHARACTER_NUMBER)
 - 機能 : EB_Error_Code eb_forward_wide_font_character (EB_Book *BOOK,
          int N, int *CHARACTER_NUMBER)
     関数 `eb_forward_narrow_font_character()' は、BOOK が選択中の副本
     で定義されている半角外字の文字番号 CHARACTER_NUMBER の N 個後ろに
     位置する外字の文字番号を取得します。

     まず、関数を呼び出す際に、CHARACTER_NUMBER の指す領域に文字番号を
     書き込んでおきます。 関数の処理が成功すると、戻ったときに N 個分だ
     け後方の文字番号に書き換わっています。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、原因を示
     すエラーコードを返します。

     あらかじめ、BOOK は副本を選択していなくてはなりません。 選択してい
     ない場合は、`EB_ERR_NO_CUR_SUB' を返します。 副本が半角外字を持っ
     ていない場合は、`EB_ERR_NO_CUR_FONT' を返します。

     N 個後ろにもう外字がない場合や、呼び出した際に CHARACTER_NUMBER の
     指す領域に書き込んであった文字番号が外字の定義範囲外にある場合は
     `EB_ERR_NO_SUCH_CHAR_BMP' を返します。

     N には負の数を指定することもできます。 この場合、次の呼び出しと等
     価になります。

          /* n < 0 とする */
          eb_backward_narrow_font_character (book, -n, character_number);

     関数 `eb_forward_wide_font_character()' は、半角外字ではなく全角
     外字について操作するという点を除いて、
     `eb_forward_narrow_font_character()' と同じです。

 - 機能 : EB_Error_Code eb_backward_narrow_font_character (EB_Book
          *BOOK, int N, int *CHARACTER_NUMBER)
 - 機能 : EB_Error_Code eb_backward_wide_font_character (EB_Book *BOOK,
          int N, int *CHARACTER_NUMBER)
     関数 `eb_backward_narrow_font_character()' は
     `eb_forward_narrow_font_character()' とはちょうど逆の関数です。
     BOOK が選択中の副本で定義されている半角外字の文字番号
     CHARACTER_NUMBER の N
     個前方に位置する外字の文字番号を取得します。

     同様に、 `eb_backward_wide_font_character()' は、全角外字について N
     個前方の外字の文字番号を取得する関数で、
     `eb_forward_wide_font_character()' と反対の関数です。

     N には負の数を指定することも可能で、それぞれ次の呼び出しと等価に
     なります。

          /* 半角外字の場合 (n < 0) */
          eb_forward_narrow_font_character (book, -n, character_number);
          
          /* 全角外字の場合 (n < 0) */
          eb_forward_wide_font_character (book, -n, character_number);

 - 機能 : EB_Error_Code eb_narrow_font_xbm_size (EB_Font_Code HEIGHT,
          size_t *SIZE)
 - 機能 : EB_Error_Code eb_narrow_font_xpm_size (EB_Font_Code HEIGHT,
          size_t *SIZE)
 - 機能 : EB_Error_Code eb_narrow_font_gif_size (EB_Font_Code HEIGHT,
          size_t *SIZE)
 - 機能 : EB_Error_Code eb_narrow_font_bmp_size (EB_Font_Code HEIGHT,
          size_t *SIZE)
 - 機能 : EB_Error_Code eb_wide_font_xbm_size (EB_Font_Code HEIGHT,
          size_t *SIZE)
 - 機能 : EB_Error_Code eb_wide_font_xpm_size (EB_Font_Code HEIGHT,
          size_t *SIZE)
 - 機能 : EB_Error_Code eb_wide_font_gif_size (EB_Font_Code HEIGHT,
          size_t *SIZE)
 - 機能 : EB_Error_Code eb_wide_font_bmp_size (EB_Font_Code HEIGHT,
          size_t *SIZE)
     最初の 4 つの関数 (`eb_narrow_font_xbm_size()' 〜
     `eb_narrow_font_bmp_size()') は、外字コード HEIGHT の半角外字一個
     のビットマップを XBM, XPM, GIF, BMP 形式にそれぞれ変換したときの
     データサイズを SIZE の指す領域に書き込みます。

     同様に、後ろの 4 つの関数 (`eb_wide_font_xbm_size()' 〜
     `eb_wide_font_bmp_size()') は、全角外字を変換したときのデータサイ
     ズを書き込みます。

     いずれの関数も、成功すると `EB_SUCCESS' を返します。 失敗すると、
     SIZE の指す領域に 0
     を書き込み、原因を示すエラーコードを返します。

 - 機能 : void eb_bitmap_to_xbm (const char *BITMAP, int WIDTH, int
          HEIGHT, char *IMAGE, size_t *IMAGE_LENGTH)
 - 機能 : void eb_bitmap_to_xpm (const char *BITMAP, int WIDTH, int
          HEIGHT, char *IMAGE, size_t *IMAGE_LENGTH)
 - 機能 : void eb_bitmap_to_gif (const char *BITMAP, int WIDTH, int
          HEIGHT, char *IMAGE, size_t *IMAGE_LENGTH)
 - 機能 : void eb_bitmap_to_bmp (const char *BITMAP, int WIDTH, int
          HEIGHT, char *IMAGE, size_t *IMAGE_LENGTH)
     これら 4 つの関数は、 `eb_narrow_font_character()' または
     `eb_wide_font_character()' で取り出した外字のビットマップを XBM,
     XPM, GIF, BMP 形式にそれぞれ変換します。

     ビットマップデータの指す領域を BITMAP で指定し、ビットマップの高
     さと幅を WIDTH, HEIGHT で渡します。

     関数の呼び出しから戻ると、IMAGE の指す領域に変換後のデータが書き
     込まれ、IMAGE_LENGTH の指す領域に変換後のデータの大きさが書き込ま
     れます。

     XPM, GIF への変換では、前景色は黒、背景色は透明になります。 BMP へ
     の変換では、前景色は黒、背景色は白になります。 XBM はモノクロ図版
     用のデータ形式なので、色の設定はありません。


File: eb-ja.info,  Node: Font Sample,  Prev: Font Functions,  Up: Local Character

サンプルプログラム
==================

     /*
      * 使用方法:
      *     font <book-path> <subbook-index>
      * 例:
      *     font /cdrom 0
      * 説明:
      *     <book-path> で指定した CD-ROM 書籍から特定の副本を選び、その
      *     副本が定義している半角外字 (高さ 16 ピクセル) をすべてアスキー
      *     アートで表示します。
      *
      *     その副本が、高さ 16 ピクセルの半角外字を定義していないと、エ
      *     ラーになります。
      *
      *     <subbook-index> には、検索対象の副本のインデックスを指定しま
      *     す。インデックスは、書籍の最初の副本から順に 0、1、2 ... に
      *     なります。
      */
     #include "config.h"
     
     #include <stdio.h>
     #include <stdlib.h>
     
     #include <eb/eb.h>
     #include <eb/error.h>
     #include <eb/font.h>
     
     int
     main(argc, argv)
         int argc;
         char *argv[];
     {
         EB_Error_Code error_code;
         EB_Book book;
         EB_Subbook_Code subbook_list[EB_MAX_SUBBOOKS];
         int subbook_count;
         int subbook_index;
         int font_start;
         unsigned char bitmap[EB_SIZE_NARROW_FONT_16];
         int i, j;
     
         /* コマンド行引数をチェック。*/
         if (argc != 3) {
             fprintf(stderr, "Usage: %s book-path subbook-index\n",
                 argv[0]);
             exit(1);
         }
     
         /* EB ライブラリと `book' を初期化。*/
         eb_initialize_library();
         eb_initialize_book(&book);
     
         /* 書籍を `book' に結び付ける。*/
         error_code = eb_bind(&book, argv[1]);
         if (error_code != EB_SUCCESS) {
             fprintf(stderr, "%s: failed to bind the book, %s: %s\n",
                 argv[0], eb_error_message(error_code), argv[1]);
             goto die;
         }
     
         /* 副本の一覧を取得。*/
         error_code = eb_subbook_list(&book, subbook_list, &subbook_count);
         if (error_code != EB_SUCCESS) {
             fprintf(stderr, "%s: failed to get the subbbook list, %s\n",
                 argv[0], eb_error_message(error_code));
             goto die;
         }
     
         /* 副本のインデックスを取得。*/
         subbook_index = atoi(argv[2]);
     
         /*「現在の副本 (current subbook)」を設定。*/
         if (eb_set_subbook(&book, subbook_list[subbook_index]) < 0) {
             fprintf(stderr, "%s: failed to set the current subbook, %s\n",
                 argv[0], eb_error_message(error_code));
             goto die;
         }
     
         /*「現在の外字の大きさ」を設定。*/
         if (eb_set_font(&book, EB_FONT_16) < 0) {
             fprintf(stderr, "%s: failed to set the font size, %s\n",
                 argv[0], eb_error_message(error_code));
             goto die;
         }
     
         /* 外字の開始位置を取得。*/
         error_code = eb_narrow_font_start(&book, &font_start);
         if (error_code != EB_SUCCESS) {
             fprintf(stderr, "%s: failed to get font information, %s\n",
                 argv[0], eb_error_message(error_code));
             goto die;
         }
     
         i = font_start;
         for (;;) {
             /* 外字のビットマップデータを取得。*/
             error_code = eb_narrow_font_character_bitmap(&book, i,
                 (char *)bitmap);
             if (error_code != EB_SUCCESS) {
                 fprintf(stderr, "%s: failed to get font data, %s\n",
                     argv[0], eb_error_message(error_code));
                 goto die;
             }
     
             /* ビットマップをアスキーアートにして出力。*/
             printf("code point=%04x\n", i);
             for (j = 0; j < 16; j++) {
                 fputc((bitmap[j] & 0x80) ? '*' : ' ', stdout);
                 fputc((bitmap[j] & 0x40) ? '*' : ' ', stdout);
                 fputc((bitmap[j] & 0x20) ? '*' : ' ', stdout);
                 fputc((bitmap[j] & 0x10) ? '*' : ' ', stdout);
                 fputc((bitmap[j] & 0x08) ? '*' : ' ', stdout);
                 fputc((bitmap[j] & 0x04) ? '*' : ' ', stdout);
                 fputc((bitmap[j] & 0x02) ? '*' : ' ', stdout);
                 fputc((bitmap[j] & 0x01) ? '*' : ' ', stdout);
                 fputc('\n', stdout);
             }
             fputs("--------\n", stdout);
     
             /* 外字の文字番号を一つ進める。*/
             error_code = eb_forward_narrow_font_character(&book, 1, &i);
             if (error_code != EB_SUCCESS)
                 break;
         }
     
         /* 書籍と EB ライブラリの利用を終了。*/
         eb_finalize_book(&book);
         eb_finalize_library();
         exit(0);
     
         /* エラー発生で終了するときの処理。*/
       die:
         eb_finalize_book(&book);
         eb_finalize_library();
         exit(1);
     }


File: eb-ja.info,  Node: Binary Data,  Next: Appendix Data,  Prev: Local Character,  Up: Top

バイナリデータ
**************

   "バイナリデータ (binary data)" とは、テキストデータ (*note テキスト
データ: Text Data.) から参照される、図版や動画、音声といったマルチメデ
ィアデータのことを指します。

   今のところ EB
ライブラリでは、全種類のバイナリデータを取り扱うことができるわけではあ
りません。 電子ブックで扱えるのは、 2 階調のモノクロ図版と、カラー図版
(JPEG) だけです。 EPWING では、モノクロ図版、カラー図版 (BMP および
JPEG) に加えて、 WAVE (PCM) 音声、MPEG 動画を扱うことができます。

   ただし、 EB ライブラリが提供しているのは、こうしたバイナリデータを
CD-ROM 書籍から取得する機能だけです。 表示したり再生したりする機能は用
意していませんので、注意して下さい。

   アプリケーションは、英和辞書や国語辞書といった辞書だけを対象にするな
ら、 バイナリデータの表示や再生には対応しなくても支障はありません。 し
かし一方では、図鑑や数式の表現にモノクロ図版を使っている数学辞典のよう
に、対応しないと不便なものもあります。 バイナリデータの表示や再生の機能
を実装するかどうかは、アプリケーションの対象辞書をどの範囲までにするの
かによって決めると良いでしょう。

   以下、この章では種類別にバイナリデータの扱い方について説明します。

   バイナリデータの種類毎にデータの取り出し方は微妙に異なりますが (これ
は データの収録方法が微妙に異なっているからに他なりません)、おおよそ手
順 は、次のようなものになります。

  1. テキストデータのフックを用いて、バイナリデータの参照情報を取得す
     る

  2. `eb_binary_set_...()' 関数を呼び出して、指定した位置のバイナリデ
     ータをこれから読み込む旨を EB ライブラリに伝える。

  3. `eb_read_binary()' で実際にデータを読み込む。

テキストデータと同様に、バイナリデータも副本に属するデータですので、副
本を選択していないと取得することはできません。 バイナリデータの読み込み
には、テキストデータとは別のファイルディスクリプタが割り当てられます。
したがって、双方を交互に読み込んでも、動作には影響はありません。

* Menu:

* Monochrome Image::            モノクロ図版
* Color Image::                 カラー図版
* WAVE Sound::                  WAVE 音声
* MPEG Movie::                  MPEG1 動画
* Binary Data Functions::       関数の詳細


File: eb-ja.info,  Node: Monochrome Image,  Next: Color Image,  Prev: Binary Data,  Up: Binary Data

モノクロ図版
============

   2 階調のモノクロ図版は、電子ブック、EPWING 双方に存在し、EB ライブラ
リ ではどちらも扱うことができます。 (電子ブックに存在する 16 階調のモノ
クロ図版は、今のところ EB ライブラリでは対応していません。)

   モノクロ図版データの内部形式は外字と同じですが、 EB ライブラリでは、
1 ピクセルに 1bit を割り当てた BMP 形式に変換してアプリケーションに渡
すようにしています。 したがって、アプリケーションからは、あたかも BMP
の図版データが収録されているようにみえます。

   モノクロ図版の取り出し方ですが、これにはまずモノクロ図版の参照開始と
終了を表すエスケープシーケンスへのフック `EB_HOOK_BEGIN_MONO_GRAPHIC'
と `EB_HOOK_END_MONO_GRAPHIC' を使います。

   フック `EB_HOOK_BEGIN_MONO_GRAPHIC' がフック関数に渡す引数 (`argv')
は 4 つあり、このうちの `argv[2]' と `argv[3]' が図版の幅と高さ (ピクセ
ル数) を意味します。

   また、フック `EB_HOOK_END_MONO_GRAPHIC' がフック関数に渡す引数は 3
つで、`argv[1]' と `argv[2]' が、図版データのページ番号とオフセットに
なります。

   モノクロ図版を取得するには、上記のフックから得た図版のページ番号と
オフセット、および幅と高さを記憶しておきます。

   次に、`eb_set_binary_mono_graphic()' を呼び出して、これからモノクロ
図版のデータを取得することを EB ライブラリに伝えます。
`eb_set_binary_mono_graphic()' への引数には、 `EB_Book'
オブジェクトと、先ほど得た図版へのページ番号、オフセット、 幅、高さを渡
します。 `EB_Book' オブジェクトは、これから取り出そうとしている図版を収
録 している副本をあらかじめ選択しておく必要があります。

     /* `eb_set_binary_mono_graphic()' の関数プロトタイプ */
     EB_Error_Code
     eb_set_binary_mono_graphic(EB_Book *book, EB_Position *position,
         int width, int height);

   電子ブックでは、フック関数に渡される幅と高さの値は 0 になっています
が、 そのまま `eb_set_binary_mono_graphic()' に渡します。 (EPWING では
0 を渡してはいけません。)

   以上で図版データの取得準備ができたので、データを読み込みます。 これ
には、`eb_read_binary()' を使います。

     #define MAX_LENGTH 1000
     char bitmap[MAX_LENGTH];
     ssize_t bitmap_length;
     
     if (eb_read_binary(&book, MAX_LENGTH, bitmap, &bitmap_length)
         != EB_SUCCESS) {
         fprintf(stderr, "an error occurs.\n");
         return;
     }

成功すると、読み込んだ図版データが `bitmap' に書き込まれ、何バイト書き
込んだのかが `bitmap_length' に書き込まれます。
書き込まれるバイト数は、最大で `MAX_LENGTH' バイトです。

   必ずしも一回の `eb_read_binary()' の呼び出しで図版データを終端まで
読み込む必要はなく、関数を繰り返し呼び出せば、前回の続きを読み込むこと
ができます。 `eb_read_binary()' は、図版データの終端まで来るとそれ以上
データは読み込みませんので、`eb_read_binary()' が 0 を返した時点で図
版データが終端したことを認識できます。


File: eb-ja.info,  Node: Color Image,  Next: WAVE Sound,  Prev: Monochrome Image,  Up: Binary Data

カラー図版
==========

   カラー図版は、電子ブックでは JPEG 形式、 EPWING では JPEG と BMP (DIB)
形式のものが使用されています。 EB ライブラリはこれらをすべて扱うことが
できますが、電子ブックへの対応は限定的なものになっています。(詳しくは
後述します。)

   カラー図版のデータを取り出すには、まず
`eb_set_binary_color_graphic()' を呼び出して、これからアプリケーション
がカラー図版のデータを取得しようとしていることを EB ライブラリに伝えま
す。 `eb_set_binary_color_graphic()' への引数には、 `EB_Book' オブジェ
クトに加えて、カラー図版のページ番号とオフセットを渡します。

     /* `eb_set_binary_color_graphic()' の関数プロトタイプ */
     EB_Error_Code
     eb_set_binary_color_graphic(EB_Book *book, EB_Position *position);

   `EB_Book' オブジェクトは、これから取り出そうとしている図版を収録し
ている副本をあらかじめ選択しておきます。 カラー図版のページ番号とオフセ
ットの情報は、カラー図版の参照開始と終了を表すエスケープシーケンスへの
フックから得ます。 フックは、インライン表示用と非インライン用の 2 種類
があり、さらにそれぞれ開始フックが JPEG 用と BMP 用に分かれています。

`EB_HOOK_BEGIN_COLOR_BMP'
`EB_HOOK_BEGIN_COLOR_JPEG'
     非インライン用 BMP, JPEG の開始フック

`EB_HOOK_END_COLOR_GRAPHIC'
     非インライン用カラー図版 (BMP, JPEG 共通) の終了フック

`EB_HOOK_BEGIN_IN_COLOR_BMP'
`EB_HOOK_BEGIN_IN_COLOR_JPEG'
     インライン用 BMP, JPEG の開始フック

`EB_HOOK_END_IN_COLOR_GRAPHIC'
     非インライン用カラー図版 (BMP, JPEG 共通) の終了フック

   非インライン用の終了フック `EB_HOOK_END_GRAPHIC' では、フック関数に
渡す引数の `argv[1]' と `argv[2]' が、図版データのページ番号とオフセッ
トになりますので、これを `eb_set_binary_color_graphic()' に渡してやりま
す。 同様に、インライン用の終了フック `EB_HOOK_END_IN_GRAPHIC' では、
`argv[2]' と `argv[3]' がページ番号とオフセットですので、 これを渡しま
す。

   後は、実際にカラー図版のデータを取り出します。 これには、モノクロ図
版と同様に `eb_read_binary()' を用います。
使い方はまったく一緒ですので、詳しくは *note モノクロ図版 : Monochrome
Image. を参照してください。

   ただし、電子ブックのカラー図版については、データの終了位置が来ても
EB ライブラリは読み込みを止めないという制限事項があります。 これは、デ
ータの大きさに関する情報が記されていないためで、データの終端位置は、ア
プリケーションが JPEG のデータをデコードして割り出すしかありません。


File: eb-ja.info,  Node: WAVE Sound,  Next: MPEG Movie,  Prev: Color Image,  Up: Binary Data

WAVE (PCM) 音声
===============

   WAVE (PCM) 形式の音声データは EPWING にだけ存在します。 (代わりに電
子ブックには CD-DA 形式の音声データがありますが、EB ライブラリでは対応
していません。)

   WAVE 形式の音声データを取り出すには、まず WAVE 音声の参照開始と終了
を 表すエスケープシーケンスへのフック `EB_HOOK_BEGIN_WAVE' と
`EB_HOOK_END_WAVE' を使います。

   フック `EB_HOOK_BEGIN_WAVE' がフック関数に渡す引数のうち、 `argv[2]'
と `argv[3]' が音声データの開始位置のページ番号とオフセット、 `argv[4]'
と `argv[5]' が終了位置のページ番号とオフセットとなります。

   この開始位置と終了位置を関数 `eb_set_binary_wave()' に渡して、その
位置にある音声データをこれから取り出すことを EB ライブラリに伝えます。

     /* `eb_set_binary_wave()' の関数プロトタイプ */
     EB_Error_Code
     eb_set_binary_wave(EB_Book *book, EB_Position *start_position,
     EB_Position *end_position);

   そして後は、実際に音声データを取り出します。 これには、他のバイナリ
データと同様に `eb_read_binary()' を用います。 `eb_read_binary()' の使
い方は、 *note モノクロ図版: Monochrome Image. を参照してください。


File: eb-ja.info,  Node: MPEG Movie,  Next: Binary Data Functions,  Prev: WAVE Sound,  Up: Binary Data

MPEG1 動画
==========

   MPEG1 形式の動画データは EPWING にだけ存在します。 動画データは
EPWING の CD-ROM の movie というディレクトリの下に、 動画毎に一個のファ
イルにした形で収められています。

   MPEG データの参照開始と終了を表すエスケープシーケンスへのフック
`EB_HOOK_BEGIN_MPEG' と `EB_HOOK_END_MPEG' を使用すると、 参照先の MPEG
のファイル名を取得できます。 具体的には、フック `EB_HOOK_BEGIN_MPEG' が
フック関数に渡す引数のうち、`argv[2]' 〜 `argv[5]' が合わせて一つのフ
ァイル名を表すようになっています。

   MPEG 動画のデータを得るには、このファイル名を `eb_set_binary_mpeg()'
に渡して、そのファイルの動画データをこれから取り出す旨を EB ライブラリ
に伝えます。 ファイル名は、次のようにして `argv + 2' (`&argv[2]' でも同
じ) を渡します。

     if (eb_set_binary_mpeg(&book, argv + 2) != EB_SUCCESS) {
         fprintf(stderr, "an error occurs.\n");
         return;
     }

   後は、実際に動画データを取り出します。 これには、やはり他のバイナリ
データと同様に `eb_read_binary()' を用います。 `eb_read_binary()' の使
い方については、 *note モノクロ図版: Monochrome Image. を参照してくださ
い。


File: eb-ja.info,  Node: Binary Data Functions,  Prev: MPEG Movie,  Up: Binary Data

関数の詳細
==========

   この節で説明している関数を使うには、次のようにヘッダファイルを読み込
んで下さい。

     #include <eb/binary.h>

 - 機能 : EB_Error_Code eb_set_binary_mono_graphic (EB_Book *BOOK, const
          EB_Position *POSITION, int WIDTH, HEIGHT)
     関数 `eb_set_binary_mono_graphic()' は、モノクロ図版のデータをこ
     れから取得しようとしていることを EB ライブラリに伝えます。 引数
     POSITION は図版の位置、 WIDTH, HEIGHT
     には図版の幅と高さを渡します。 これらの情報は、図版の参照元である
     テキストデータに記載されており、通常はフック関数を通じて得るよう
     にします。 ただし、電子ブックでは幅と高さの値の情報がテキストデー
     タに記されていないため、0 を渡すことになります。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、原因に応
     じたエラーコードを返します。

     あらかじめ、図版を取り出そうとしている副本を選択しておかなければ
     なりません。 BOOK が副本を選択していなければ、`EB_ERR_NO_CUR_SUB'
     を 返します。 図版の位置、幅、高さの値が明らかにおかしいと EB ライ
     ブラリが判断したときは、`EB_ERR_NO_SUCH_BINARY' を返します。

     この関数は、実際に図版データを読み込むことはしません。 読み込みに
     は、`eb_read_binary()' を用います。 モノクロ図版のデータは、1 ピク
     セルに 1bit を割り当てた BMP 形式になっています。

 - 機能 : EB_Error_Code eb_set_binary_color_graphic (EB_Book *BOOK,
          const EB_Position *POSITION)
     関数 `eb_set_binary_color_graphic()' は、EPWING のカラー図版のデー
     タをこれから取得しようとしていることを EB ライブラリに伝えます。
     引数 POSITION は図版の位置を渡します。 位置の情報は、図版の参照元
     であるテキストデータに記載されており、通常はフック関数を通じて得
     るようにします。

     成功すると、関数は `EB_SUCCESS' を返します。

     あらかじめ、図版を取り出そうとしている副本を選択しておかなければ
     なりません。 BOOK が副本を選択していなければ、`EB_ERR_NO_CUR_SUB'
     を 返します。 図版の位置が明らかにおかしいと EB ライブラリが判断し
     たときは、 `EB_ERR_NO_SUCH_BINARY' を返します。

     この関数は、実際に図版データを読み込むことはしません。 読み込みに
     は、`eb_read_binary()' を用います。 カラー図版データは、 JPEG か
     BMP (DIB) のいずかの形式になっています。

 - 機能 : EB_Error_Code eb_set_binary_wave (EB_Book *BOOK, const
          EB_Position *START_POSITION, EB_Position *END_POSITION)
     関数 `eb_set_binary_wave()' は、WAVE (PCM) 形式の音声のデータをこ
     れから取得しようとしていることを EB ライブラリに伝えます。 引数
     START_POSITION と END_POSITION
     には音声データの開始位置を渡します。 位置の情報は、音声データの参
     照元であるテキストデータに記載されており、 通常はフック関数を通じ
     て得るようにします。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、原因に応
     じたエラーコードを返します。

     あらかじめ、音声データを取り出そうとしている副本を選択しておかなけ
     ればなりません。 BOOK が副本を選択していなければ、
     `EB_ERR_NO_CUR_SUB' を返します。 音声データの位置が明らかにおかし
     いと EB ライブラリが判断したときは、 `EB_ERR_NO_SUCH_BINARY' を返
     します。

     この関数は、実際に音声データを読み込むことはしません。 読み込みに
     は、`eb_read_binary()' を用います。

 - 機能 : EB_Error_Code eb_set_binary_mpeg (EB_Book *BOOK, const
          unsigned int *ARGV)
     関数 `eb_set_binary_mpeg()' は、 MPEG1
     形式の動画のデータをこれから取得しようとしていることを EB ライブラ
     リに伝えます。 引数 ARGV には動画データのファイル名を渡します。 た
     だし、このファイル名は文字列ではなく、フック関数
     `EB_HOOK_BEGIN_MPEG' に渡された引数 `argv[2]' 〜 `argv[5]' の部分
     を渡します。 つまり、フック関数の引数 `argv + 2' を、
     `eb_set_binary_mpeg()' への引数 ARGV として渡します。

     成功すると、関数は `EB_SUCCESS' を返します。 失敗すると、原因に応
     じたエラーコードを返します。

     あらかじめ、動画データを取り出そうとしている副本を選択しておかなけ
     ればなりません。 BOOK が副本を選択していなければ、
     `EB_ERR_NO_CUR_SUB' を返します。 存在しない動画ファイル名を EB ラ
     イブラリが判断したときは、 `EB_ERR_NO_SUCH_BINARY' を返します。

     成功すると、関数は `EB_SUCCESS' を返します。

     この関数は、実際に動画データを読み込むことはしません。 読み込みに
     は、`eb_read_binary()' を用います。

 - 機能 : EB_Error_Code eb_read_binary (EB_Book *BOOK, size_t
          BINARY_MAX_LENGTH, char *BINARY, ssize_t *BINARY_LENGTH)
     関数 `eb_read_binary()' は、バイナリデータを読み込みます。 読み込
     もうとしているバイナリデータは、事前に

        * `eb_set_binary_mono_graphic()'

        * `eb_set_binary_color_graphic()'

        * `eb_set_binary_wave()'

        * `eb_set_binary_mpeg()'

     のいずれかの関数で、EB ライブラリに通知しておく必要があります。

     読み込んだデータは引数 BINARY の指す先の領域に書き込まれます。 ま
     た、このとき書き込まれたバイト数は、BINARY_LENGTH の指す先の領域
     にセットされます。 ただし、書き込まれるバイト数は、最長でも引数
     BINARY_MAX_LENGTH に指定した値までとなります。

     この関数は、特に読み込んだデータの終端にナル文字を付加するような事
     は しません。 読み込まれるデータもバイナリ形式なので、途中にナル文
     字が出現する事もあります。

     この関数を一回呼び出しだだけで、バイナリデータ全体を一気に取得する
     必要はありません。 繰り返し呼び出せば、前回の続きからデータが読み
     込まれます。

     ただし、以下に挙げた関数を呼び出すと、バイナリデータの読み込みに関
     する状態記録がリセットされますので、それ以上の読み込みはできなく
     なります。

        * `eb_set_subbook()'

        * `eb_unset_subbook()'

        * `eb_load_all_subbooks()'

        * `eb_bind()'

        * `eb_finalize_book()'

        * `eb_set_binary_mono_graphic()'

        * `eb_set_binary_color_graphic()'

        * `eb_set_binary_wave()'

        * `eb_set_binary_mpeg()'

     `eb_read_binary()' を繰り返し呼んだ場合、バイナリデータはその都度
     BINARY の先頭から書き込まれ、 *BINARY_LENGTH の値も、その回の
     `eb_read_binary()' の呼び出しで書き込まれたバイト数になります。

     データの終端に来ると、それ以上この関数を呼んでも関数は BINARY
     には何も書き込まず、*BINARY_LENGTH に 0 を書き込み、`EB_SUCCESS'
     を返します。

     成功すると、この関数は `EB_SUCCESS' を返します。 失敗すると、
     BINARY_LENGTH が指す領域に -1 を書き込み、原因を示すエラーコード
     を返します。 この場合、バイナリデータの読み込み状態の記録がリセッ
     トされますので、 データの続きを読み込むことはできなくなります。

     あらかじめ、BOOK はいずれかの副本を選択していなくてはなりません。
     選択していない場合は、`EB_ERR_NO_CUR_SUB' を返します。 また、冒頭
     に挙げた関数の呼び出しが成功していない状態でこの関数を呼ぶと、
     `EB_ERR_NO_CUR_BINARY' を返します。

 - 機能 : EB_Error_Code eb_compose_movie_file_name (const unsigned int
          *ARGV, char *COMPOSED_FILE_NAME)
     関数 `eb_compose_movie_file_name()' は、動画データのファイル名を
     通常の文字列に変換します。

     EB ライブラリでは、動画データのファイル名はフック関数
     `EB_HOOK_BEGIN_MPEG' に渡された 4 つの int 型引数 (`argv[2]' 〜
     `argv[5]') によって表現されます。

     動画データを読み込む際は、これをそのまま `eb_set_binary_mpeg()'
     に渡せば良いのですが、ファイル名を通常の文字列で得たい場合は、この
     関数を用います。 たとえば、個々の動画に一意の ID のようなものを振
     りたい場合は、ファイル名を ID として使うと良いかも知れません。

     フック関数の引数 `argv + 2' をこの関数への引数 ARGV
     として渡すと、COMPOSED_FILE_NAME が指す先の領域に、文字列形式に変
     換されたファイル名が格納されます。 ファイル名は最長で
     `EB_MAX_DIRECTORY_NAME_LENGTH' (= 8) バイトになります。 この長さ
     には終端のナル文字の分を含んでいませんので、格納領域にははもう 1
     バイト余裕が要ります。

     なお、格納されたファイル名は、実際に存在するファイル名とは若干異な
     っている可能性があります。 たとえば、英字の大文字と小文字、接尾子
     の有無などの違いがこれに当たります。

     成功すると、関数は `EB_SUCCESS' を返します。

 - 機能 : EB_Error_Code eb_decompose_movie_file_name (unsigned int
          *ARGV, const char *COMPOSED_FILE_NAME)
     関数 `eb_compose_movie_file_name()' は、
     `eb_compose_movie_file_name()' とちょうど逆の働きをします。
     つまり、通常の文字列に変換された動画データのファイル名
     COMPOSED_FILE_NAME を、4 つの int 型引数 ARGV に戻します。 したが
     って、ARGV の指す領域は、少なくとも int 型の値を 4 つ格納できる大
     きさが必要です。

     成功すると、関数は `EB_SUCCESS' を返します。


File: eb-ja.info,  Node: Appendix Data,  Next: Book List on Server,  Prev: Binary Data,  Up: Top

appendix データ
***************

   "appendix" ("付録") とは CD-ROM 書籍の補助データのことです。
appendix は CD-ROM 書籍の出版社から提供されているものではなく、 EB ライ
ブラリに固有のものです。 `ebappendix' コマンドを用いて生成します (詳し
くは *note appendix (付録) とは: (ebappendix-ja)What is Appendix.)。

   appendix は以下のデータを CD-ROM 書籍に対して提供します。

   * 本文の区切りコード

   * 外字の代替文字列

   appendix のレイアウトは CD-ROM 書籍のものとよく似ています。 トップデ
ィレクトリには `catalog' もしくは `catalogs' ファイルが存在し、各副本の
データは対応するサブディレクトリに配置されています。

   アプリケーションは appendix に対応し、本文の区切りコードの情報を使え
る ようにすることをお薦めします。 外字の代替文字列については、外字のフ
ォントをそのまま表示できるのであれば、 対応する必要性はかなり乏しいです
が、本文の区切りコードは、扱えないと正しく本文を表示できない書籍に対応
できません (区切りコードについては、*note 区切りコードの問題 : Stop Code
Issue.)。

* Menu:

* EB_Appendix::                 `EB_Appendix' オブジェクト
* Appendix Subbook::            副本
* Appendix Stop Code::          本文の区切りコード
* Appendix Alternation Text::   外字の代替文字列
* Appendix Data Types::
* Appendix Functions::          関数の詳細
* Appendix Sample::             サンプルプログラム

